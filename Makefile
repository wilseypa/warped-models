# Makefile.in generated by automake 1.11.3 from Makefile.am.
# simulationmodels/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
# Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# Process this file with automake to produce Makefile.in

# See copyright notice in file Copyright in the root directory of this archive.

# See copyright notice in file Copyright in the root directory of this archive.

# NOTE: automake is supposed to support nested conditionals, but it 
#       does not! We have to use separate if-statements until it does.

# Process this file with automake to produce Makefile.in

# Copyright (c) 2000 The University of Cincinnati.  
# All rights reserved.

# UC MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
# SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
# OR NON-INFRINGEMENT.  UC SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY
# LICENSEE AS A RESULT OF USING, RESULT OF USING, MODIFYING OR
# DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.

# By using or copying this Software, Licensee agrees to abide by the
# intellectual property laws, and all other applicable laws of the U.S.,
# and the terms of this license.

# Authors: Philip A. Wilsey	phil.wilsey@uc.edu
# 	    Dale E. Martin	dmartin@clifton-labs.com
#	    Magnus Danielson	cfmd@swipnet.se

# $Author: dmartin $
# $Revision: 1.7 $

#---------------------------------------------------------------------------
# 
# $Id: Makefile.am.stub,v 1.7 2003-02-18 21:31:06 dmartin Exp $
# 
#---------------------------------------------------------------------------

# Process this file with automake to produce Makefile.in

# Copyright (c) 2002 Clifton Labs, Inc.
# All rights reserved.

# CLIFTON LABS MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY
# OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
# THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE, OR NON-INFRINGEMENT.  CLIFTON LABS SHALL NOT BE LIABLE FOR ANY
# DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, RESULT OF USING,
# MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.

# By using or copying this Software, Licensee agrees to abide by the
# intellectual property laws, and all other applicable laws of the U.S.,
# and the terms of this license.

# You may modify, distribute, and use the software contained in this
# package under the terms of the "GNU LIBRARY GENERAL PUBLIC LICENSE"
# version 2, June 1991. A copy of this license agreement can be found in
# the file "LGPL", distributed with this archive.

# Authors: dmartin@cliftonlabs.com

# Process this file with automake to produce Makefile.in

# See copyright notice in file Copyright in the root directory of this archive.

# Process this file with automake to produce Makefile.in

# See copyright notice in file Copyright in the root directory of this archive.

# Process this file with automake to produce Makefile.in

# Copyright (c) 2000 The University of Cincinnati.  
# All rights reserved.

# UC MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
# SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
# OR NON-INFRINGEMENT.  UC SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY
# LICENSEE AS A RESULT OF USING, RESULT OF USING, MODIFYING OR
# DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.

# By using or copying this Software, Licensee agrees to abide by the
# intellectual property laws, and all other applicable laws of the U.S.,
# and the terms of this license.

# Authors: Philip A. Wilsey	phil.wilsey@uc.edu
# 	    Dale E. Martin	dmartin@clifton-labs.com
#	    Magnus Danielson	cfmd@swipnet.se
#	    Randall King	kingr8@cliftonlabs.com

# Process this file with automake to produce Makefile.in

# Copyright (c) 2000 The University of Cincinnati.  
# All rights reserved.

# UC MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
# SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
# OR NON-INFRINGEMENT.  UC SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY
# LICENSEE AS A RESULT OF USING, RESULT OF USING, MODIFYING OR
# DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.

# By using or copying this Software, Licensee agrees to abide by the
# intellectual property laws, and all other applicable laws of the U.S.,
# and the terms of this license.

# Authors: Philip A. Wilsey	phil.wilsey@uc.edu
# 	    Dale E. Martin	dmartin@clifton-labs.com
#	    Magnus Danielson	cfmd@swipnet.se

# Process this file with automake to produce Makefile.in

# Copyright (c) 2000 The University of Cincinnati.  
# All rights reserved.

# UC MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
# SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
# OR NON-INFRINGEMENT.  UC SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY
# LICENSEE AS A RESULT OF USING, RESULT OF USING, MODIFYING OR
# DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.

# By using or copying this Software, Licensee agrees to abide by the
# intellectual property laws, and all other applicable laws of the U.S.,
# and the terms of this license.

# Authors: Philip A. Wilsey	phil.wilsey@uc.edu
# 	    Dale E. Martin	dmartin@clifton-labs.com
#	    Magnus Danielson	cfmd@swipnet.se

# $Author: kingr8 $
# $Revision: 1.3 $

#---------------------------------------------------------------------------
# 
# $Id: Makefile.am.stub,v 1.3 2010-09-27 01:50:19 kingr8 Exp $
# 
#---------------------------------------------------------------------------



pkgdatadir = $(datadir)/warped
pkgincludedir = $(includedir)/warped
pkglibdir = $(libdir)/warped
pkglibexecdir = $(libexecdir)/warped
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
DIST_COMMON = README $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/adaptTest/Makefile.am.stub \
	$(srcdir)/circuitsimulationmodels/fulladder/Makefile.am.stub \
	$(srcdir)/phold/Makefile.am.stub \
	$(srcdir)/pingPong/Makefile.am.stub \
	$(srcdir)/raid/Makefile.am.stub $(srcdir)/rnd/Makefile.am.stub \
	$(srcdir)/smmp/Makefile.am.stub \
	$(srcdir)/warped/Makefile.am.stub \
	$(top_srcdir)/Makefile.am.common
noinst_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \
	$(am__EXEEXT_4) $(am__EXEEXT_5) $(am__EXEEXT_6) \
	$(am__EXEEXT_7)
subdir = simulationmodels
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/src/warped/WarpedConfig.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(libdir)"
LTLIBRARIES = $(lib_LTLIBRARIES)
libRnd_la_LIBADD =
am_libRnd_la_OBJECTS = Uniform.lo Poisson.lo NegExp.lo DiscUnif.lo \
	Normal.lo Binomial.lo MLCG.lo gcd.lo RNG.lo Random.lo
libRnd_la_OBJECTS = $(am_libRnd_la_OBJECTS)
am__EXEEXT_1 = pingpong$(EXEEXT)
#am__EXEEXT_2 = warpedUnitTests$(EXEEXT)
am__EXEEXT_3 = adapttest$(EXEEXT)
am__EXEEXT_4 = pholdSim$(EXEEXT)
am__EXEEXT_5 = raidSim$(EXEEXT)
am__EXEEXT_6 = smmpSim$(EXEEXT)
am__EXEEXT_7 = fulladderSim$(EXEEXT)
PROGRAMS = $(noinst_PROGRAMS)
am_adapttest_OBJECTS = AdaptTestEvent.$(OBJEXT) \
	AdaptTestObject.$(OBJEXT) AdaptTestApplication.$(OBJEXT) \
	adaptTestMain.$(OBJEXT)
adapttest_OBJECTS = $(am_adapttest_OBJECTS)
adapttest_DEPENDENCIES = $(top_builddir)/src/libwarped.la
adapttest_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(adapttest_LDFLAGS) $(LDFLAGS) -o $@
am_fulladderSim_OBJECTS = FullAdderApplication.$(OBJEXT) \
	FullAdderMain.$(OBJEXT) LogicEvent.$(OBJEXT) \
	LogicComponent.$(OBJEXT) FileReaderWriter.$(OBJEXT) \
	NInputGate.$(OBJEXT) NInputAndGate.$(OBJEXT) \
	NInputXorGate.$(OBJEXT) NInputOrGate.$(OBJEXT)
fulladderSim_OBJECTS = $(am_fulladderSim_OBJECTS)
fulladderSim_DEPENDENCIES = $(top_builddir)/src/libwarped.la \
	$(top_builddir)/simulationmodels/libRnd.la
fulladderSim_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(fulladderSim_LDFLAGS) $(LDFLAGS) -o $@
am_pholdSim_OBJECTS = PHOLDApplication.$(OBJEXT) PHOLDEvent.$(OBJEXT) \
	PHOLDFactoryManager.$(OBJEXT) Process.$(OBJEXT) \
	ProcessState.$(OBJEXT) ProcessStub.$(OBJEXT) \
	PHOLDMain.$(OBJEXT)
pholdSim_OBJECTS = $(am_pholdSim_OBJECTS)
pholdSim_DEPENDENCIES = $(top_builddir)/src/libwarped.la \
	$(top_builddir)/simulationmodels/libRnd.la
pholdSim_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(pholdSim_LDFLAGS) $(LDFLAGS) -o $@
am_pingpong_OBJECTS = PingEvent.$(OBJEXT) PingObject.$(OBJEXT) \
	PingPongApplication.$(OBJEXT) main.$(OBJEXT)
pingpong_OBJECTS = $(am_pingpong_OBJECTS)
pingpong_DEPENDENCIES = $(top_builddir)/src/libwarped.la
pingpong_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(pingpong_LDFLAGS) $(LDFLAGS) -o $@
am_raidSim_OBJECTS = RAIDDiskState.$(OBJEXT) RAIDFork.$(OBJEXT) \
	RAIDProcess.$(OBJEXT) RAIDApplication.$(OBJEXT) \
	RAIDDiskStub.$(OBJEXT) RAIDForkState.$(OBJEXT) \
	RAIDProcessState.$(OBJEXT) RAIDDisk.$(OBJEXT) \
	RAIDFactoryManager.$(OBJEXT) RAIDForkStub.$(OBJEXT) \
	RAIDProcessStub.$(OBJEXT) RAIDMain.$(OBJEXT)
raidSim_OBJECTS = $(am_raidSim_OBJECTS)
raidSim_DEPENDENCIES = $(top_builddir)/src/libwarped.la \
	$(top_builddir)/simulationmodels/libRnd.la
raidSim_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(raidSim_LDFLAGS) $(LDFLAGS) -o $@
am_smmpSim_OBJECTS = SMMPApplication.$(OBJEXT) SMMPMain.$(OBJEXT) \
	SMMPForkObject.$(OBJEXT) SMMPJoinObject.$(OBJEXT) \
	MemRouterObject.$(OBJEXT) MemSourceObject.$(OBJEXT) \
	SMMPPartitioner.$(OBJEXT) SMMPQueueObject.$(OBJEXT) \
	SMMPServerObject.$(OBJEXT)
smmpSim_OBJECTS = $(am_smmpSim_OBJECTS)
smmpSim_DEPENDENCIES = $(top_builddir)/src/libwarped.la \
	$(top_builddir)/simulationmodels/libRnd.la
smmpSim_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(smmpSim_LDFLAGS) $(LDFLAGS) -o $@
am__warpedUnitTests_SOURCES_DIST = warped/warpedUnitTestsMain.cpp \
	warped/AdaptiveOutputManagerTest.cpp \
	warped/AdaptiveOutputManagerTest.h \
	warped/AdaptiveStateManagerBaseTest.cpp \
	warped/AdaptiveStateManagerBaseTest.h \
	warped/AggressiveOutputManagerTest.cpp \
	warped/AggressiveOutputManagerTest.h \
	warped/CirculateInitializationMessageTest.cpp \
	warped/CirculateInitializationMessageTest.h \
	warped/CostAdaptiveStateManagerTest.cpp \
	warped/CostAdaptiveStateManagerTest.h \
	warped/DefaultSchedulingManagerTest.cpp \
	warped/DefaultSchedulingManagerTest.h \
	warped/DefaultTimeWarpEventSetTest.cpp \
	warped/DefaultTimeWarpEventSetTest.h \
	warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp \
	warped/DefaultTimeWarpEventSetOneAntiMsgTest.h \
	warped/EventMessageBaseTest.cpp warped/EventMessageBaseTest.h \
	warped/EventMessageTest.cpp warped/EventMessageTest.h \
	warped/EventTest.cpp warped/EventTest.h \
	warped/GVTUpdateMessageTest.cpp warped/GVTUpdateMessageTest.h \
	warped/InitializationMessageTest.cpp \
	warped/InitializationMessageTest.h \
	warped/KernelMessageTest.cpp warped/KernelMessageTest.h \
	warped/LazyOutputManagerTest.cpp \
	warped/LazyOutputManagerTest.h \
	warped/MatternGVTMessageTest.cpp \
	warped/MatternGVTMessageTest.h \
	warped/NegativeEventMessageTest.cpp \
	warped/NegativeEventMessageTest.h warped/OutputManagerTest.cpp \
	warped/OutputManagerTest.h warped/RestoreCkptMessageTest.cpp \
	warped/RestoreCkptMessageTest.h \
	warped/SchedulingManagerTest.cpp \
	warped/SchedulingManagerTest.h warped/SerializableTest.cpp \
	warped/SerializableTest.h warped/SerializedInstanceTest.cpp \
	warped/SerializedInstanceTest.h warped/StartMessageTest.cpp \
	warped/StartMessageTest.h warped/TerminateTokenTest.cpp \
	warped/TerminateTokenTest.h warped/TimeWarpEventSetTest.h \
	warped/TimeWarpEventSetTest.cpp warped/TimeWarpMultiSetTest.h \
	warped/TimeWarpMultiSetTest.cpp \
	warped/TimeWarpMultiSetOneAntiMsgTest.h \
	warped/TimeWarpMultiSetOneAntiMsgTest.cpp \
	warped/TimeWarpSimulationManagerAdapter.cpp \
	warped/WarpedUnitTest.cpp warped/WarpedUnitTest.h
#am_warpedUnitTests_OBJECTS =  \
#	warpedUnitTestsMain.$(OBJEXT) \
#	AdaptiveOutputManagerTest.$(OBJEXT) \
#	AdaptiveStateManagerBaseTest.$(OBJEXT) \
#	AggressiveOutputManagerTest.$(OBJEXT) \
#	CirculateInitializationMessageTest.$(OBJEXT) \
#	CostAdaptiveStateManagerTest.$(OBJEXT) \
#	DefaultSchedulingManagerTest.$(OBJEXT) \
#	DefaultTimeWarpEventSetTest.$(OBJEXT) \
#	DefaultTimeWarpEventSetOneAntiMsgTest.$(OBJEXT) \
#	EventMessageBaseTest.$(OBJEXT) \
#	EventMessageTest.$(OBJEXT) \
#	EventTest.$(OBJEXT) \
#	GVTUpdateMessageTest.$(OBJEXT) \
#	InitializationMessageTest.$(OBJEXT) \
#	KernelMessageTest.$(OBJEXT) \
#	LazyOutputManagerTest.$(OBJEXT) \
#	MatternGVTMessageTest.$(OBJEXT) \
#	NegativeEventMessageTest.$(OBJEXT) \
#	OutputManagerTest.$(OBJEXT) \
#	RestoreCkptMessageTest.$(OBJEXT) \
#	SchedulingManagerTest.$(OBJEXT) \
#	SerializableTest.$(OBJEXT) \
#	SerializedInstanceTest.$(OBJEXT) \
#	StartMessageTest.$(OBJEXT) \
#	TerminateTokenTest.$(OBJEXT) \
#	TimeWarpEventSetTest.$(OBJEXT) \
#	TimeWarpMultiSetTest.$(OBJEXT) \
#	TimeWarpMultiSetOneAntiMsgTest.$(OBJEXT) \
#	TimeWarpSimulationManagerAdapter.$(OBJEXT) \
#	WarpedUnitTest.$(OBJEXT)
warpedUnitTests_OBJECTS = $(am_warpedUnitTests_OBJECTS)
#warpedUnitTests_DEPENDENCIES =  \
#	$(top_builddir)/src/libwarped.la
warpedUnitTests_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(warpedUnitTests_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)/src/warped
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libRnd_la_SOURCES) $(adapttest_SOURCES) \
	$(fulladderSim_SOURCES) $(pholdSim_SOURCES) \
	$(pingpong_SOURCES) $(raidSim_SOURCES) $(smmpSim_SOURCES) \
	$(warpedUnitTests_SOURCES)
DIST_SOURCES = $(libRnd_la_SOURCES) $(adapttest_SOURCES) \
	$(fulladderSim_SOURCES) $(pholdSim_SOURCES) \
	$(pingpong_SOURCES) $(raidSim_SOURCES) $(smmpSim_SOURCES) \
	$(am__warpedUnitTests_SOURCES_DIST)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
INSTALL_HEADER = $(INSTALL) -p -m 644
ACLOCAL = ${SHELL} /home/xinyu/pdes/warped/missing --run aclocal-1.11
AMTAR = $${TAR-tar}
AR = ar
AUTOCONF = ${SHELL} /home/xinyu/pdes/warped/missing --run autoconf
AUTOHEADER = ${SHELL} /home/xinyu/pdes/warped/missing --run autoheader
AUTOMAKE = ${SHELL} /home/xinyu/pdes/warped/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = -I/usr/include/mpich2 -I/home/xinyu/warped_install//include -I/usr/include/pccts
CPP_UNIT_TEST_DIR = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = -L/usr/lib/ -L/home/xinyu/warped_install//lib
LIBOBJS = 
LIBS = -lutils -ldl -lnsl 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEDEPEND = 
MAKEINFO = ${SHELL} /home/xinyu/pdes/warped/missing --run makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = warped
PACKAGE_BUGREPORT = 
PACKAGE_NAME = warped
PACKAGE_STRING = warped 3.0
PACKAGE_TARNAME = warped
PACKAGE_URL = 
PACKAGE_VERSION = 3.0
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
SSH_COMMAND = 
STRIP = strip
VERSION = 3.0
WARPED_VERSION = 2.0-pre031216
abs_builddir = /home/xinyu/pdes/warped/simulationmodels
abs_srcdir = /home/xinyu/pdes/warped/simulationmodels
abs_top_builddir = /home/xinyu/pdes/warped
abs_top_srcdir = /home/xinyu/pdes/warped
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/xinyu/pdes/warped/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /home/xinyu/warped_install
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
ssh_path = /usr/bin/ssh
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
GLOBALCPPFLAGS = -DDEVELOPER_ASSERTIONS
GLOBALCXXFLAGS = 
GLOBALLDFLAGS = 
GLOBALLDADD = 
INCLUDES = -I$(top_srcdir)/src -I$(top_builddir)/src
PING_PONG_PROGRAM = pingpong
pingpong_SOURCES = \
	pingPong/PingEvent.cpp \
	pingPong/PingEvent.h \
	pingPong/PingObject.cpp \
	pingPong/PingObject.h \
	pingPong/PingObjectState.h \
	pingPong/PingPongApplication.h \
	pingPong/PingPongApplication.cpp \
	pingPong/main.cpp

pingpong_LDFLAGS = -static
pingpong_LDADD = $(top_builddir)/src/libwarped.la
EXTRA_DIST = pingPong/Makefile.am.stub
#UNIT_TEST_PROGRAM = warpedUnitTests
#warpedUnitTests_SOURCES = \
#	warped/warpedUnitTestsMain.cpp	\
#	warped/AdaptiveOutputManagerTest.cpp \
#	warped/AdaptiveOutputManagerTest.h \
#	warped/AdaptiveStateManagerBaseTest.cpp \
#	warped/AdaptiveStateManagerBaseTest.h \
#	warped/AggressiveOutputManagerTest.cpp \
#	warped/AggressiveOutputManagerTest.h \
#	warped/CirculateInitializationMessageTest.cpp \
#	warped/CirculateInitializationMessageTest.h \
#	warped/CostAdaptiveStateManagerTest.cpp \
#	warped/CostAdaptiveStateManagerTest.h \
#	warped/DefaultSchedulingManagerTest.cpp \
#	warped/DefaultSchedulingManagerTest.h \
#	warped/DefaultTimeWarpEventSetTest.cpp \
#	warped/DefaultTimeWarpEventSetTest.h \
#	warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp \
#	warped/DefaultTimeWarpEventSetOneAntiMsgTest.h \
#	warped/EventMessageBaseTest.cpp \
#	warped/EventMessageBaseTest.h \
#	warped/EventMessageTest.cpp \
#	warped/EventMessageTest.h \
#	warped/EventTest.cpp \
#	warped/EventTest.h \
#	warped/GVTUpdateMessageTest.cpp \
#	warped/GVTUpdateMessageTest.h \
#	warped/InitializationMessageTest.cpp \
#	warped/InitializationMessageTest.h \
#	warped/KernelMessageTest.cpp \
#	warped/KernelMessageTest.h \
#	warped/LazyOutputManagerTest.cpp \
#	warped/LazyOutputManagerTest.h \
#	warped/MatternGVTMessageTest.cpp \
#	warped/MatternGVTMessageTest.h \
#	warped/NegativeEventMessageTest.cpp \
#	warped/NegativeEventMessageTest.h \
#	warped/OutputManagerTest.cpp \
#	warped/OutputManagerTest.h \
#	warped/RestoreCkptMessageTest.cpp \
#	warped/RestoreCkptMessageTest.h \
#	warped/SchedulingManagerTest.cpp \
#	warped/SchedulingManagerTest.h \
#	warped/SerializableTest.cpp \
#	warped/SerializableTest.h \
#	warped/SerializedInstanceTest.cpp \
#	warped/SerializedInstanceTest.h \
#	warped/StartMessageTest.cpp \
#	warped/StartMessageTest.h \
#	warped/TerminateTokenTest.cpp \
#	warped/TerminateTokenTest.h \
#	warped/TimeWarpEventSetTest.h \
#	warped/TimeWarpEventSetTest.cpp \
#	warped/TimeWarpMultiSetTest.h \
#	warped/TimeWarpMultiSetTest.cpp \
#	warped/TimeWarpMultiSetOneAntiMsgTest.h \
#	warped/TimeWarpMultiSetOneAntiMsgTest.cpp \
#	warped/TimeWarpSimulationManagerAdapter.cpp \
#	warped/WarpedUnitTest.cpp \
#	warped/WarpedUnitTest.h

#warpedUnitTests_LDFLAGS = -static
#warpedUnitTests_LDADD = $(top_builddir)/src/libwarped.la
ADAPT_TEST_PROGRAM = adapttest
adapttest_SOURCES = \
	adaptTest/AdaptTestEvent.cpp \
	adaptTest/AdaptTestEvent.h \
	adaptTest/AdaptTestObject.cpp \
	adaptTest/AdaptTestObject.h \
	adaptTest/AdaptTestObjectState.h \
	adaptTest/AdaptTestApplication.h \
	adaptTest/AdaptTestApplication.cpp \
	adaptTest/adaptTestMain.cpp

adapttest_LDFLAGS = -static
adapttest_LDADD = $(top_builddir)/src/libwarped.la
PHOLD_PROGRAM = pholdSim
pholdSim_SOURCES = \
     phold/factory/include/PHOLDApplication.h \
     phold/factory/src/PHOLDApplication.cpp \
     phold/factory/include/PHOLDEvent.h \
     phold/factory/src/PHOLDEvent.cpp \
     phold/factory/include/PHOLDFactoryManager.h \
     phold/factory/src/PHOLDFactoryManager.cpp \
     phold/factory/include/Process.h \
     phold/factory/src/Process.cpp \
     phold/factory/include/ProcessState.h \
     phold/factory/src/ProcessState.cpp \
     phold/factory/include/ProcessStub.h \
     phold/factory/src/ProcessStub.cpp \
     phold/factory/src/PHOLDMain.cpp

pholdSim_LDFLAGS = -static
pholdSim_LDADD = $(top_builddir)/src/libwarped.la \
            $(top_builddir)/simulationmodels/libRnd.la

RAID_PROGRAM = raidSim
raidSim_SOURCES = \
     raid/factory/include/RAIDDiskState.h \
     raid/factory/src/RAIDDiskState.cpp \
     raid/factory/include/RAIDFork.h \
     raid/factory/src/RAIDFork.cpp \
     raid/factory/include/RAIDProcess.h \
     raid/factory/src/RAIDProcess.cpp \
     raid/factory/include/RAIDRequest.h \
     raid/factory/include/RAIDApplication.h \
     raid/factory/src/RAIDApplication.cpp \
     raid/factory/include/RAIDDiskStub.h \
     raid/factory/src/RAIDDiskStub.cpp \
     raid/factory/include/RAIDForkState.h \
     raid/factory/src/RAIDForkState.cpp \
     raid/factory/include/RAIDProcessState.h \
     raid/factory/src/RAIDProcessState.cpp \
     raid/factory/include/RAIDDisk.h \
     raid/factory/src/RAIDDisk.cpp \
     raid/factory/include/RAIDFactoryManager.h \
     raid/factory/src/RAIDFactoryManager.cpp \
     raid/factory/include/RAIDForkStub.h \
     raid/factory/src/RAIDForkStub.cpp \
     raid/factory/include/RAIDProcessStub.h \
     raid/factory/src/RAIDProcessStub.cpp \
     raid/factory/src/RAIDMain.cpp

raidSim_LDFLAGS = -static
raidSim_LDADD = $(top_builddir)/src/libwarped.la \
              $(top_builddir)/simulationmodels/libRnd.la

lib_LTLIBRARIES = libRnd.la
libRnd_la_SOURCES = \
     rnd/Uniform.cc \
     rnd/Poisson.cc \
     rnd/NegExp.cc \
     rnd/DiscUnif.cc \
     rnd/Normal.cc \
     rnd/Binomial.cc \
     rnd/MLCG.cc \
     rnd/gcd.cc \
     rnd/RNG.cc \
     rnd/Random.cc

SMMP_PROGRAM = smmpSim
smmpSim_SOURCES = \
     smmp/SMMPApplication.h \
     smmp/SMMPApplication.cpp \
     smmp/SMMPMain.cpp \
     smmp/SidTypes.h \
     smmp/SMMPForkObject.cpp \
     smmp/SMMPForkObject.h \
     smmp/SMMPForkState.h \
     smmp/SMMPJoinObject.cpp \
     smmp/SMMPJoinObject.h \
     smmp/SMMPJoinState.h \
     smmp/MemEvents.h \
     smmp/MemRouterObject.cpp \
     smmp/MemRouterObject.h \
     smmp/MemRouterState.h \
     smmp/MemSourceObject.cpp \
     smmp/MemSourceObject.h \
     smmp/MemSourceState.h \
     smmp/SMMPPartitioner.cpp \
     smmp/SMMPPartitioner.h \
     smmp/SMMPQueueObject.cpp \
     smmp/SMMPQueueObject.h \
     smmp/SMMPQueueState.h \
     smmp/SMMPServerObject.cpp \
     smmp/SMMPServerObject.h \
     smmp/SMMPServerState.h

smmpSim_LDFLAGS = -static
smmpSim_LDADD = $(top_builddir)/src/libwarped.la \
            $(top_builddir)/simulationmodels/libRnd.la

FULLADDER_PROGRAM = fulladderSim
fulladderSim_SOURCES = \
	circuitsimulationmodels/fulladder/factory/include/FullAdderApplication.h \
	circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp \
	circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp \
	circuitsimulationmodels/fulladder/factory/include/LogicEvent.h \
	circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp \
	circuitsimulationmodels/fulladder/factory/include/NInputGateState.h \
	circuitsimulationmodels/fulladder/factory/include/LogicComponent.h \
	circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp \
	circuitsimulationmodels/fulladder/factory/include/FileReaderWriter.h \
	circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp \
	circuitsimulationmodels/fulladder/factory/include/FileState.h \
	circuitsimulationmodels/fulladder/factory/include/NInputGate.h \
	circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp \
	circuitsimulationmodels/fulladder/factory/include/NInputAndGate.h \
	circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp \
	circuitsimulationmodels/fulladder/factory/include/NInputXorGate.h \
	circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp \
	circuitsimulationmodels/fulladder/factory/include/NInputOrGate.h \
	circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp 

fulladderSim_LDFLAGS = -static
fulladderSim_LDADD = $(top_builddir)/src/libwarped.la \
		    $(top_builddir)/simulationmodels/libRnd.la

all: all-am

.SUFFIXES:
.SUFFIXES: .cc .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/Makefile.am.common $(srcdir)/pingPong/Makefile.am.stub $(srcdir)/warped/Makefile.am.stub $(srcdir)/adaptTest/Makefile.am.stub $(srcdir)/phold/Makefile.am.stub $(srcdir)/raid/Makefile.am.stub $(srcdir)/rnd/Makefile.am.stub $(srcdir)/smmp/Makefile.am.stub $(srcdir)/circuitsimulationmodels/fulladder/Makefile.am.stub $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu simulationmodels/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu simulationmodels/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/Makefile.am.common $(srcdir)/pingPong/Makefile.am.stub $(srcdir)/warped/Makefile.am.stub $(srcdir)/adaptTest/Makefile.am.stub $(srcdir)/phold/Makefile.am.stub $(srcdir)/raid/Makefile.am.stub $(srcdir)/rnd/Makefile.am.stub $(srcdir)/smmp/Makefile.am.stub $(srcdir)/circuitsimulationmodels/fulladder/Makefile.am.stub:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libRnd.la: $(libRnd_la_OBJECTS) $(libRnd_la_DEPENDENCIES) $(EXTRA_libRnd_la_DEPENDENCIES) 
	$(CXXLINK) -rpath $(libdir) $(libRnd_la_OBJECTS) $(libRnd_la_LIBADD) $(LIBS)

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
adapttest$(EXEEXT): $(adapttest_OBJECTS) $(adapttest_DEPENDENCIES) $(EXTRA_adapttest_DEPENDENCIES) 
	@rm -f adapttest$(EXEEXT)
	$(adapttest_LINK) $(adapttest_OBJECTS) $(adapttest_LDADD) $(LIBS)
fulladderSim$(EXEEXT): $(fulladderSim_OBJECTS) $(fulladderSim_DEPENDENCIES) $(EXTRA_fulladderSim_DEPENDENCIES) 
	@rm -f fulladderSim$(EXEEXT)
	$(fulladderSim_LINK) $(fulladderSim_OBJECTS) $(fulladderSim_LDADD) $(LIBS)
pholdSim$(EXEEXT): $(pholdSim_OBJECTS) $(pholdSim_DEPENDENCIES) $(EXTRA_pholdSim_DEPENDENCIES) 
	@rm -f pholdSim$(EXEEXT)
	$(pholdSim_LINK) $(pholdSim_OBJECTS) $(pholdSim_LDADD) $(LIBS)
pingpong$(EXEEXT): $(pingpong_OBJECTS) $(pingpong_DEPENDENCIES) $(EXTRA_pingpong_DEPENDENCIES) 
	@rm -f pingpong$(EXEEXT)
	$(pingpong_LINK) $(pingpong_OBJECTS) $(pingpong_LDADD) $(LIBS)
raidSim$(EXEEXT): $(raidSim_OBJECTS) $(raidSim_DEPENDENCIES) $(EXTRA_raidSim_DEPENDENCIES) 
	@rm -f raidSim$(EXEEXT)
	$(raidSim_LINK) $(raidSim_OBJECTS) $(raidSim_LDADD) $(LIBS)
smmpSim$(EXEEXT): $(smmpSim_OBJECTS) $(smmpSim_DEPENDENCIES) $(EXTRA_smmpSim_DEPENDENCIES) 
	@rm -f smmpSim$(EXEEXT)
	$(smmpSim_LINK) $(smmpSim_OBJECTS) $(smmpSim_LDADD) $(LIBS)
warpedUnitTests$(EXEEXT): $(warpedUnitTests_OBJECTS) $(warpedUnitTests_DEPENDENCIES) $(EXTRA_warpedUnitTests_DEPENDENCIES) 
	@rm -f warpedUnitTests$(EXEEXT)
	$(warpedUnitTests_LINK) $(warpedUnitTests_OBJECTS) $(warpedUnitTests_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/AdaptTestApplication.Po
include ./$(DEPDIR)/AdaptTestEvent.Po
include ./$(DEPDIR)/AdaptTestObject.Po
include ./$(DEPDIR)/AdaptiveOutputManagerTest.Po
include ./$(DEPDIR)/AdaptiveStateManagerBaseTest.Po
include ./$(DEPDIR)/AggressiveOutputManagerTest.Po
include ./$(DEPDIR)/Binomial.Plo
include ./$(DEPDIR)/CirculateInitializationMessageTest.Po
include ./$(DEPDIR)/CostAdaptiveStateManagerTest.Po
include ./$(DEPDIR)/DefaultSchedulingManagerTest.Po
include ./$(DEPDIR)/DefaultTimeWarpEventSetOneAntiMsgTest.Po
include ./$(DEPDIR)/DefaultTimeWarpEventSetTest.Po
include ./$(DEPDIR)/DiscUnif.Plo
include ./$(DEPDIR)/EventMessageBaseTest.Po
include ./$(DEPDIR)/EventMessageTest.Po
include ./$(DEPDIR)/EventTest.Po
include ./$(DEPDIR)/FileReaderWriter.Po
include ./$(DEPDIR)/FullAdderApplication.Po
include ./$(DEPDIR)/FullAdderMain.Po
include ./$(DEPDIR)/GVTUpdateMessageTest.Po
include ./$(DEPDIR)/InitializationMessageTest.Po
include ./$(DEPDIR)/KernelMessageTest.Po
include ./$(DEPDIR)/LazyOutputManagerTest.Po
include ./$(DEPDIR)/LogicComponent.Po
include ./$(DEPDIR)/LogicEvent.Po
include ./$(DEPDIR)/MLCG.Plo
include ./$(DEPDIR)/MatternGVTMessageTest.Po
include ./$(DEPDIR)/MemRouterObject.Po
include ./$(DEPDIR)/MemSourceObject.Po
include ./$(DEPDIR)/NInputAndGate.Po
include ./$(DEPDIR)/NInputGate.Po
include ./$(DEPDIR)/NInputOrGate.Po
include ./$(DEPDIR)/NInputXorGate.Po
include ./$(DEPDIR)/NegExp.Plo
include ./$(DEPDIR)/NegativeEventMessageTest.Po
include ./$(DEPDIR)/Normal.Plo
include ./$(DEPDIR)/OutputManagerTest.Po
include ./$(DEPDIR)/PHOLDApplication.Po
include ./$(DEPDIR)/PHOLDEvent.Po
include ./$(DEPDIR)/PHOLDFactoryManager.Po
include ./$(DEPDIR)/PHOLDMain.Po
include ./$(DEPDIR)/PingEvent.Po
include ./$(DEPDIR)/PingObject.Po
include ./$(DEPDIR)/PingPongApplication.Po
include ./$(DEPDIR)/Poisson.Plo
include ./$(DEPDIR)/Process.Po
include ./$(DEPDIR)/ProcessState.Po
include ./$(DEPDIR)/ProcessStub.Po
include ./$(DEPDIR)/RAIDApplication.Po
include ./$(DEPDIR)/RAIDDisk.Po
include ./$(DEPDIR)/RAIDDiskState.Po
include ./$(DEPDIR)/RAIDDiskStub.Po
include ./$(DEPDIR)/RAIDFactoryManager.Po
include ./$(DEPDIR)/RAIDFork.Po
include ./$(DEPDIR)/RAIDForkState.Po
include ./$(DEPDIR)/RAIDForkStub.Po
include ./$(DEPDIR)/RAIDMain.Po
include ./$(DEPDIR)/RAIDProcess.Po
include ./$(DEPDIR)/RAIDProcessState.Po
include ./$(DEPDIR)/RAIDProcessStub.Po
include ./$(DEPDIR)/RNG.Plo
include ./$(DEPDIR)/Random.Plo
include ./$(DEPDIR)/RestoreCkptMessageTest.Po
include ./$(DEPDIR)/SMMPApplication.Po
include ./$(DEPDIR)/SMMPForkObject.Po
include ./$(DEPDIR)/SMMPJoinObject.Po
include ./$(DEPDIR)/SMMPMain.Po
include ./$(DEPDIR)/SMMPPartitioner.Po
include ./$(DEPDIR)/SMMPQueueObject.Po
include ./$(DEPDIR)/SMMPServerObject.Po
include ./$(DEPDIR)/SchedulingManagerTest.Po
include ./$(DEPDIR)/SerializableTest.Po
include ./$(DEPDIR)/SerializedInstanceTest.Po
include ./$(DEPDIR)/StartMessageTest.Po
include ./$(DEPDIR)/TerminateTokenTest.Po
include ./$(DEPDIR)/TimeWarpEventSetTest.Po
include ./$(DEPDIR)/TimeWarpMultiSetOneAntiMsgTest.Po
include ./$(DEPDIR)/TimeWarpMultiSetTest.Po
include ./$(DEPDIR)/TimeWarpSimulationManagerAdapter.Po
include ./$(DEPDIR)/Uniform.Plo
include ./$(DEPDIR)/WarpedUnitTest.Po
include ./$(DEPDIR)/adaptTestMain.Po
include ./$(DEPDIR)/gcd.Plo
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/warpedUnitTestsMain.Po

.cc.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

Uniform.lo: rnd/Uniform.cc
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Uniform.lo -MD -MP -MF $(DEPDIR)/Uniform.Tpo -c -o Uniform.lo `test -f 'rnd/Uniform.cc' || echo '$(srcdir)/'`rnd/Uniform.cc
	$(am__mv) $(DEPDIR)/Uniform.Tpo $(DEPDIR)/Uniform.Plo
#	source='rnd/Uniform.cc' object='Uniform.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Uniform.lo `test -f 'rnd/Uniform.cc' || echo '$(srcdir)/'`rnd/Uniform.cc

Poisson.lo: rnd/Poisson.cc
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Poisson.lo -MD -MP -MF $(DEPDIR)/Poisson.Tpo -c -o Poisson.lo `test -f 'rnd/Poisson.cc' || echo '$(srcdir)/'`rnd/Poisson.cc
	$(am__mv) $(DEPDIR)/Poisson.Tpo $(DEPDIR)/Poisson.Plo
#	source='rnd/Poisson.cc' object='Poisson.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Poisson.lo `test -f 'rnd/Poisson.cc' || echo '$(srcdir)/'`rnd/Poisson.cc

NegExp.lo: rnd/NegExp.cc
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NegExp.lo -MD -MP -MF $(DEPDIR)/NegExp.Tpo -c -o NegExp.lo `test -f 'rnd/NegExp.cc' || echo '$(srcdir)/'`rnd/NegExp.cc
	$(am__mv) $(DEPDIR)/NegExp.Tpo $(DEPDIR)/NegExp.Plo
#	source='rnd/NegExp.cc' object='NegExp.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NegExp.lo `test -f 'rnd/NegExp.cc' || echo '$(srcdir)/'`rnd/NegExp.cc

DiscUnif.lo: rnd/DiscUnif.cc
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DiscUnif.lo -MD -MP -MF $(DEPDIR)/DiscUnif.Tpo -c -o DiscUnif.lo `test -f 'rnd/DiscUnif.cc' || echo '$(srcdir)/'`rnd/DiscUnif.cc
	$(am__mv) $(DEPDIR)/DiscUnif.Tpo $(DEPDIR)/DiscUnif.Plo
#	source='rnd/DiscUnif.cc' object='DiscUnif.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DiscUnif.lo `test -f 'rnd/DiscUnif.cc' || echo '$(srcdir)/'`rnd/DiscUnif.cc

Normal.lo: rnd/Normal.cc
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Normal.lo -MD -MP -MF $(DEPDIR)/Normal.Tpo -c -o Normal.lo `test -f 'rnd/Normal.cc' || echo '$(srcdir)/'`rnd/Normal.cc
	$(am__mv) $(DEPDIR)/Normal.Tpo $(DEPDIR)/Normal.Plo
#	source='rnd/Normal.cc' object='Normal.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Normal.lo `test -f 'rnd/Normal.cc' || echo '$(srcdir)/'`rnd/Normal.cc

Binomial.lo: rnd/Binomial.cc
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Binomial.lo -MD -MP -MF $(DEPDIR)/Binomial.Tpo -c -o Binomial.lo `test -f 'rnd/Binomial.cc' || echo '$(srcdir)/'`rnd/Binomial.cc
	$(am__mv) $(DEPDIR)/Binomial.Tpo $(DEPDIR)/Binomial.Plo
#	source='rnd/Binomial.cc' object='Binomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Binomial.lo `test -f 'rnd/Binomial.cc' || echo '$(srcdir)/'`rnd/Binomial.cc

MLCG.lo: rnd/MLCG.cc
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MLCG.lo -MD -MP -MF $(DEPDIR)/MLCG.Tpo -c -o MLCG.lo `test -f 'rnd/MLCG.cc' || echo '$(srcdir)/'`rnd/MLCG.cc
	$(am__mv) $(DEPDIR)/MLCG.Tpo $(DEPDIR)/MLCG.Plo
#	source='rnd/MLCG.cc' object='MLCG.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MLCG.lo `test -f 'rnd/MLCG.cc' || echo '$(srcdir)/'`rnd/MLCG.cc

gcd.lo: rnd/gcd.cc
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gcd.lo -MD -MP -MF $(DEPDIR)/gcd.Tpo -c -o gcd.lo `test -f 'rnd/gcd.cc' || echo '$(srcdir)/'`rnd/gcd.cc
	$(am__mv) $(DEPDIR)/gcd.Tpo $(DEPDIR)/gcd.Plo
#	source='rnd/gcd.cc' object='gcd.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gcd.lo `test -f 'rnd/gcd.cc' || echo '$(srcdir)/'`rnd/gcd.cc

RNG.lo: rnd/RNG.cc
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RNG.lo -MD -MP -MF $(DEPDIR)/RNG.Tpo -c -o RNG.lo `test -f 'rnd/RNG.cc' || echo '$(srcdir)/'`rnd/RNG.cc
	$(am__mv) $(DEPDIR)/RNG.Tpo $(DEPDIR)/RNG.Plo
#	source='rnd/RNG.cc' object='RNG.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RNG.lo `test -f 'rnd/RNG.cc' || echo '$(srcdir)/'`rnd/RNG.cc

Random.lo: rnd/Random.cc
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Random.lo -MD -MP -MF $(DEPDIR)/Random.Tpo -c -o Random.lo `test -f 'rnd/Random.cc' || echo '$(srcdir)/'`rnd/Random.cc
	$(am__mv) $(DEPDIR)/Random.Tpo $(DEPDIR)/Random.Plo
#	source='rnd/Random.cc' object='Random.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Random.lo `test -f 'rnd/Random.cc' || echo '$(srcdir)/'`rnd/Random.cc

AdaptTestEvent.o: adaptTest/AdaptTestEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AdaptTestEvent.o -MD -MP -MF $(DEPDIR)/AdaptTestEvent.Tpo -c -o AdaptTestEvent.o `test -f 'adaptTest/AdaptTestEvent.cpp' || echo '$(srcdir)/'`adaptTest/AdaptTestEvent.cpp
	$(am__mv) $(DEPDIR)/AdaptTestEvent.Tpo $(DEPDIR)/AdaptTestEvent.Po
#	source='adaptTest/AdaptTestEvent.cpp' object='AdaptTestEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AdaptTestEvent.o `test -f 'adaptTest/AdaptTestEvent.cpp' || echo '$(srcdir)/'`adaptTest/AdaptTestEvent.cpp

AdaptTestEvent.obj: adaptTest/AdaptTestEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AdaptTestEvent.obj -MD -MP -MF $(DEPDIR)/AdaptTestEvent.Tpo -c -o AdaptTestEvent.obj `if test -f 'adaptTest/AdaptTestEvent.cpp'; then $(CYGPATH_W) 'adaptTest/AdaptTestEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/adaptTest/AdaptTestEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/AdaptTestEvent.Tpo $(DEPDIR)/AdaptTestEvent.Po
#	source='adaptTest/AdaptTestEvent.cpp' object='AdaptTestEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AdaptTestEvent.obj `if test -f 'adaptTest/AdaptTestEvent.cpp'; then $(CYGPATH_W) 'adaptTest/AdaptTestEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/adaptTest/AdaptTestEvent.cpp'; fi`

AdaptTestObject.o: adaptTest/AdaptTestObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AdaptTestObject.o -MD -MP -MF $(DEPDIR)/AdaptTestObject.Tpo -c -o AdaptTestObject.o `test -f 'adaptTest/AdaptTestObject.cpp' || echo '$(srcdir)/'`adaptTest/AdaptTestObject.cpp
	$(am__mv) $(DEPDIR)/AdaptTestObject.Tpo $(DEPDIR)/AdaptTestObject.Po
#	source='adaptTest/AdaptTestObject.cpp' object='AdaptTestObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AdaptTestObject.o `test -f 'adaptTest/AdaptTestObject.cpp' || echo '$(srcdir)/'`adaptTest/AdaptTestObject.cpp

AdaptTestObject.obj: adaptTest/AdaptTestObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AdaptTestObject.obj -MD -MP -MF $(DEPDIR)/AdaptTestObject.Tpo -c -o AdaptTestObject.obj `if test -f 'adaptTest/AdaptTestObject.cpp'; then $(CYGPATH_W) 'adaptTest/AdaptTestObject.cpp'; else $(CYGPATH_W) '$(srcdir)/adaptTest/AdaptTestObject.cpp'; fi`
	$(am__mv) $(DEPDIR)/AdaptTestObject.Tpo $(DEPDIR)/AdaptTestObject.Po
#	source='adaptTest/AdaptTestObject.cpp' object='AdaptTestObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AdaptTestObject.obj `if test -f 'adaptTest/AdaptTestObject.cpp'; then $(CYGPATH_W) 'adaptTest/AdaptTestObject.cpp'; else $(CYGPATH_W) '$(srcdir)/adaptTest/AdaptTestObject.cpp'; fi`

AdaptTestApplication.o: adaptTest/AdaptTestApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AdaptTestApplication.o -MD -MP -MF $(DEPDIR)/AdaptTestApplication.Tpo -c -o AdaptTestApplication.o `test -f 'adaptTest/AdaptTestApplication.cpp' || echo '$(srcdir)/'`adaptTest/AdaptTestApplication.cpp
	$(am__mv) $(DEPDIR)/AdaptTestApplication.Tpo $(DEPDIR)/AdaptTestApplication.Po
#	source='adaptTest/AdaptTestApplication.cpp' object='AdaptTestApplication.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AdaptTestApplication.o `test -f 'adaptTest/AdaptTestApplication.cpp' || echo '$(srcdir)/'`adaptTest/AdaptTestApplication.cpp

AdaptTestApplication.obj: adaptTest/AdaptTestApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AdaptTestApplication.obj -MD -MP -MF $(DEPDIR)/AdaptTestApplication.Tpo -c -o AdaptTestApplication.obj `if test -f 'adaptTest/AdaptTestApplication.cpp'; then $(CYGPATH_W) 'adaptTest/AdaptTestApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/adaptTest/AdaptTestApplication.cpp'; fi`
	$(am__mv) $(DEPDIR)/AdaptTestApplication.Tpo $(DEPDIR)/AdaptTestApplication.Po
#	source='adaptTest/AdaptTestApplication.cpp' object='AdaptTestApplication.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AdaptTestApplication.obj `if test -f 'adaptTest/AdaptTestApplication.cpp'; then $(CYGPATH_W) 'adaptTest/AdaptTestApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/adaptTest/AdaptTestApplication.cpp'; fi`

adaptTestMain.o: adaptTest/adaptTestMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT adaptTestMain.o -MD -MP -MF $(DEPDIR)/adaptTestMain.Tpo -c -o adaptTestMain.o `test -f 'adaptTest/adaptTestMain.cpp' || echo '$(srcdir)/'`adaptTest/adaptTestMain.cpp
	$(am__mv) $(DEPDIR)/adaptTestMain.Tpo $(DEPDIR)/adaptTestMain.Po
#	source='adaptTest/adaptTestMain.cpp' object='adaptTestMain.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o adaptTestMain.o `test -f 'adaptTest/adaptTestMain.cpp' || echo '$(srcdir)/'`adaptTest/adaptTestMain.cpp

adaptTestMain.obj: adaptTest/adaptTestMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT adaptTestMain.obj -MD -MP -MF $(DEPDIR)/adaptTestMain.Tpo -c -o adaptTestMain.obj `if test -f 'adaptTest/adaptTestMain.cpp'; then $(CYGPATH_W) 'adaptTest/adaptTestMain.cpp'; else $(CYGPATH_W) '$(srcdir)/adaptTest/adaptTestMain.cpp'; fi`
	$(am__mv) $(DEPDIR)/adaptTestMain.Tpo $(DEPDIR)/adaptTestMain.Po
#	source='adaptTest/adaptTestMain.cpp' object='adaptTestMain.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o adaptTestMain.obj `if test -f 'adaptTest/adaptTestMain.cpp'; then $(CYGPATH_W) 'adaptTest/adaptTestMain.cpp'; else $(CYGPATH_W) '$(srcdir)/adaptTest/adaptTestMain.cpp'; fi`

FullAdderApplication.o: circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FullAdderApplication.o -MD -MP -MF $(DEPDIR)/FullAdderApplication.Tpo -c -o FullAdderApplication.o `test -f 'circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp
	$(am__mv) $(DEPDIR)/FullAdderApplication.Tpo $(DEPDIR)/FullAdderApplication.Po
#	source='circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp' object='FullAdderApplication.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FullAdderApplication.o `test -f 'circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp

FullAdderApplication.obj: circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FullAdderApplication.obj -MD -MP -MF $(DEPDIR)/FullAdderApplication.Tpo -c -o FullAdderApplication.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp'; fi`
	$(am__mv) $(DEPDIR)/FullAdderApplication.Tpo $(DEPDIR)/FullAdderApplication.Po
#	source='circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp' object='FullAdderApplication.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FullAdderApplication.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/FullAdderApplication.cpp'; fi`

FullAdderMain.o: circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FullAdderMain.o -MD -MP -MF $(DEPDIR)/FullAdderMain.Tpo -c -o FullAdderMain.o `test -f 'circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp
	$(am__mv) $(DEPDIR)/FullAdderMain.Tpo $(DEPDIR)/FullAdderMain.Po
#	source='circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp' object='FullAdderMain.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FullAdderMain.o `test -f 'circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp

FullAdderMain.obj: circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FullAdderMain.obj -MD -MP -MF $(DEPDIR)/FullAdderMain.Tpo -c -o FullAdderMain.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp'; fi`
	$(am__mv) $(DEPDIR)/FullAdderMain.Tpo $(DEPDIR)/FullAdderMain.Po
#	source='circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp' object='FullAdderMain.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FullAdderMain.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/FullAdderMain.cpp'; fi`

LogicEvent.o: circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LogicEvent.o -MD -MP -MF $(DEPDIR)/LogicEvent.Tpo -c -o LogicEvent.o `test -f 'circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp
	$(am__mv) $(DEPDIR)/LogicEvent.Tpo $(DEPDIR)/LogicEvent.Po
#	source='circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp' object='LogicEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LogicEvent.o `test -f 'circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp

LogicEvent.obj: circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LogicEvent.obj -MD -MP -MF $(DEPDIR)/LogicEvent.Tpo -c -o LogicEvent.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/LogicEvent.Tpo $(DEPDIR)/LogicEvent.Po
#	source='circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp' object='LogicEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LogicEvent.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/LogicEvent.cpp'; fi`

LogicComponent.o: circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LogicComponent.o -MD -MP -MF $(DEPDIR)/LogicComponent.Tpo -c -o LogicComponent.o `test -f 'circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp
	$(am__mv) $(DEPDIR)/LogicComponent.Tpo $(DEPDIR)/LogicComponent.Po
#	source='circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp' object='LogicComponent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LogicComponent.o `test -f 'circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp

LogicComponent.obj: circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LogicComponent.obj -MD -MP -MF $(DEPDIR)/LogicComponent.Tpo -c -o LogicComponent.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp'; fi`
	$(am__mv) $(DEPDIR)/LogicComponent.Tpo $(DEPDIR)/LogicComponent.Po
#	source='circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp' object='LogicComponent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LogicComponent.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/LogicComponent.cpp'; fi`

FileReaderWriter.o: circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FileReaderWriter.o -MD -MP -MF $(DEPDIR)/FileReaderWriter.Tpo -c -o FileReaderWriter.o `test -f 'circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp
	$(am__mv) $(DEPDIR)/FileReaderWriter.Tpo $(DEPDIR)/FileReaderWriter.Po
#	source='circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp' object='FileReaderWriter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FileReaderWriter.o `test -f 'circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp

FileReaderWriter.obj: circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FileReaderWriter.obj -MD -MP -MF $(DEPDIR)/FileReaderWriter.Tpo -c -o FileReaderWriter.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp'; fi`
	$(am__mv) $(DEPDIR)/FileReaderWriter.Tpo $(DEPDIR)/FileReaderWriter.Po
#	source='circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp' object='FileReaderWriter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FileReaderWriter.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/FileReaderWriter.cpp'; fi`

NInputGate.o: circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NInputGate.o -MD -MP -MF $(DEPDIR)/NInputGate.Tpo -c -o NInputGate.o `test -f 'circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp
	$(am__mv) $(DEPDIR)/NInputGate.Tpo $(DEPDIR)/NInputGate.Po
#	source='circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp' object='NInputGate.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NInputGate.o `test -f 'circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp

NInputGate.obj: circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NInputGate.obj -MD -MP -MF $(DEPDIR)/NInputGate.Tpo -c -o NInputGate.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp'; fi`
	$(am__mv) $(DEPDIR)/NInputGate.Tpo $(DEPDIR)/NInputGate.Po
#	source='circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp' object='NInputGate.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NInputGate.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/NInputGate.cpp'; fi`

NInputAndGate.o: circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NInputAndGate.o -MD -MP -MF $(DEPDIR)/NInputAndGate.Tpo -c -o NInputAndGate.o `test -f 'circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp
	$(am__mv) $(DEPDIR)/NInputAndGate.Tpo $(DEPDIR)/NInputAndGate.Po
#	source='circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp' object='NInputAndGate.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NInputAndGate.o `test -f 'circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp

NInputAndGate.obj: circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NInputAndGate.obj -MD -MP -MF $(DEPDIR)/NInputAndGate.Tpo -c -o NInputAndGate.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp'; fi`
	$(am__mv) $(DEPDIR)/NInputAndGate.Tpo $(DEPDIR)/NInputAndGate.Po
#	source='circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp' object='NInputAndGate.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NInputAndGate.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/NInputAndGate.cpp'; fi`

NInputXorGate.o: circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NInputXorGate.o -MD -MP -MF $(DEPDIR)/NInputXorGate.Tpo -c -o NInputXorGate.o `test -f 'circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp
	$(am__mv) $(DEPDIR)/NInputXorGate.Tpo $(DEPDIR)/NInputXorGate.Po
#	source='circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp' object='NInputXorGate.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NInputXorGate.o `test -f 'circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp

NInputXorGate.obj: circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NInputXorGate.obj -MD -MP -MF $(DEPDIR)/NInputXorGate.Tpo -c -o NInputXorGate.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp'; fi`
	$(am__mv) $(DEPDIR)/NInputXorGate.Tpo $(DEPDIR)/NInputXorGate.Po
#	source='circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp' object='NInputXorGate.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NInputXorGate.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/NInputXorGate.cpp'; fi`

NInputOrGate.o: circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NInputOrGate.o -MD -MP -MF $(DEPDIR)/NInputOrGate.Tpo -c -o NInputOrGate.o `test -f 'circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp
	$(am__mv) $(DEPDIR)/NInputOrGate.Tpo $(DEPDIR)/NInputOrGate.Po
#	source='circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp' object='NInputOrGate.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NInputOrGate.o `test -f 'circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp' || echo '$(srcdir)/'`circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp

NInputOrGate.obj: circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NInputOrGate.obj -MD -MP -MF $(DEPDIR)/NInputOrGate.Tpo -c -o NInputOrGate.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp'; fi`
	$(am__mv) $(DEPDIR)/NInputOrGate.Tpo $(DEPDIR)/NInputOrGate.Po
#	source='circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp' object='NInputOrGate.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NInputOrGate.obj `if test -f 'circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp'; then $(CYGPATH_W) 'circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp'; else $(CYGPATH_W) '$(srcdir)/circuitsimulationmodels/fulladder/factory/src/NInputOrGate.cpp'; fi`

PHOLDApplication.o: phold/factory/src/PHOLDApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PHOLDApplication.o -MD -MP -MF $(DEPDIR)/PHOLDApplication.Tpo -c -o PHOLDApplication.o `test -f 'phold/factory/src/PHOLDApplication.cpp' || echo '$(srcdir)/'`phold/factory/src/PHOLDApplication.cpp
	$(am__mv) $(DEPDIR)/PHOLDApplication.Tpo $(DEPDIR)/PHOLDApplication.Po
#	source='phold/factory/src/PHOLDApplication.cpp' object='PHOLDApplication.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PHOLDApplication.o `test -f 'phold/factory/src/PHOLDApplication.cpp' || echo '$(srcdir)/'`phold/factory/src/PHOLDApplication.cpp

PHOLDApplication.obj: phold/factory/src/PHOLDApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PHOLDApplication.obj -MD -MP -MF $(DEPDIR)/PHOLDApplication.Tpo -c -o PHOLDApplication.obj `if test -f 'phold/factory/src/PHOLDApplication.cpp'; then $(CYGPATH_W) 'phold/factory/src/PHOLDApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/PHOLDApplication.cpp'; fi`
	$(am__mv) $(DEPDIR)/PHOLDApplication.Tpo $(DEPDIR)/PHOLDApplication.Po
#	source='phold/factory/src/PHOLDApplication.cpp' object='PHOLDApplication.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PHOLDApplication.obj `if test -f 'phold/factory/src/PHOLDApplication.cpp'; then $(CYGPATH_W) 'phold/factory/src/PHOLDApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/PHOLDApplication.cpp'; fi`

PHOLDEvent.o: phold/factory/src/PHOLDEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PHOLDEvent.o -MD -MP -MF $(DEPDIR)/PHOLDEvent.Tpo -c -o PHOLDEvent.o `test -f 'phold/factory/src/PHOLDEvent.cpp' || echo '$(srcdir)/'`phold/factory/src/PHOLDEvent.cpp
	$(am__mv) $(DEPDIR)/PHOLDEvent.Tpo $(DEPDIR)/PHOLDEvent.Po
#	source='phold/factory/src/PHOLDEvent.cpp' object='PHOLDEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PHOLDEvent.o `test -f 'phold/factory/src/PHOLDEvent.cpp' || echo '$(srcdir)/'`phold/factory/src/PHOLDEvent.cpp

PHOLDEvent.obj: phold/factory/src/PHOLDEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PHOLDEvent.obj -MD -MP -MF $(DEPDIR)/PHOLDEvent.Tpo -c -o PHOLDEvent.obj `if test -f 'phold/factory/src/PHOLDEvent.cpp'; then $(CYGPATH_W) 'phold/factory/src/PHOLDEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/PHOLDEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/PHOLDEvent.Tpo $(DEPDIR)/PHOLDEvent.Po
#	source='phold/factory/src/PHOLDEvent.cpp' object='PHOLDEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PHOLDEvent.obj `if test -f 'phold/factory/src/PHOLDEvent.cpp'; then $(CYGPATH_W) 'phold/factory/src/PHOLDEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/PHOLDEvent.cpp'; fi`

PHOLDFactoryManager.o: phold/factory/src/PHOLDFactoryManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PHOLDFactoryManager.o -MD -MP -MF $(DEPDIR)/PHOLDFactoryManager.Tpo -c -o PHOLDFactoryManager.o `test -f 'phold/factory/src/PHOLDFactoryManager.cpp' || echo '$(srcdir)/'`phold/factory/src/PHOLDFactoryManager.cpp
	$(am__mv) $(DEPDIR)/PHOLDFactoryManager.Tpo $(DEPDIR)/PHOLDFactoryManager.Po
#	source='phold/factory/src/PHOLDFactoryManager.cpp' object='PHOLDFactoryManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PHOLDFactoryManager.o `test -f 'phold/factory/src/PHOLDFactoryManager.cpp' || echo '$(srcdir)/'`phold/factory/src/PHOLDFactoryManager.cpp

PHOLDFactoryManager.obj: phold/factory/src/PHOLDFactoryManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PHOLDFactoryManager.obj -MD -MP -MF $(DEPDIR)/PHOLDFactoryManager.Tpo -c -o PHOLDFactoryManager.obj `if test -f 'phold/factory/src/PHOLDFactoryManager.cpp'; then $(CYGPATH_W) 'phold/factory/src/PHOLDFactoryManager.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/PHOLDFactoryManager.cpp'; fi`
	$(am__mv) $(DEPDIR)/PHOLDFactoryManager.Tpo $(DEPDIR)/PHOLDFactoryManager.Po
#	source='phold/factory/src/PHOLDFactoryManager.cpp' object='PHOLDFactoryManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PHOLDFactoryManager.obj `if test -f 'phold/factory/src/PHOLDFactoryManager.cpp'; then $(CYGPATH_W) 'phold/factory/src/PHOLDFactoryManager.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/PHOLDFactoryManager.cpp'; fi`

Process.o: phold/factory/src/Process.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Process.o -MD -MP -MF $(DEPDIR)/Process.Tpo -c -o Process.o `test -f 'phold/factory/src/Process.cpp' || echo '$(srcdir)/'`phold/factory/src/Process.cpp
	$(am__mv) $(DEPDIR)/Process.Tpo $(DEPDIR)/Process.Po
#	source='phold/factory/src/Process.cpp' object='Process.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Process.o `test -f 'phold/factory/src/Process.cpp' || echo '$(srcdir)/'`phold/factory/src/Process.cpp

Process.obj: phold/factory/src/Process.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Process.obj -MD -MP -MF $(DEPDIR)/Process.Tpo -c -o Process.obj `if test -f 'phold/factory/src/Process.cpp'; then $(CYGPATH_W) 'phold/factory/src/Process.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/Process.cpp'; fi`
	$(am__mv) $(DEPDIR)/Process.Tpo $(DEPDIR)/Process.Po
#	source='phold/factory/src/Process.cpp' object='Process.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Process.obj `if test -f 'phold/factory/src/Process.cpp'; then $(CYGPATH_W) 'phold/factory/src/Process.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/Process.cpp'; fi`

ProcessState.o: phold/factory/src/ProcessState.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProcessState.o -MD -MP -MF $(DEPDIR)/ProcessState.Tpo -c -o ProcessState.o `test -f 'phold/factory/src/ProcessState.cpp' || echo '$(srcdir)/'`phold/factory/src/ProcessState.cpp
	$(am__mv) $(DEPDIR)/ProcessState.Tpo $(DEPDIR)/ProcessState.Po
#	source='phold/factory/src/ProcessState.cpp' object='ProcessState.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProcessState.o `test -f 'phold/factory/src/ProcessState.cpp' || echo '$(srcdir)/'`phold/factory/src/ProcessState.cpp

ProcessState.obj: phold/factory/src/ProcessState.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProcessState.obj -MD -MP -MF $(DEPDIR)/ProcessState.Tpo -c -o ProcessState.obj `if test -f 'phold/factory/src/ProcessState.cpp'; then $(CYGPATH_W) 'phold/factory/src/ProcessState.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/ProcessState.cpp'; fi`
	$(am__mv) $(DEPDIR)/ProcessState.Tpo $(DEPDIR)/ProcessState.Po
#	source='phold/factory/src/ProcessState.cpp' object='ProcessState.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProcessState.obj `if test -f 'phold/factory/src/ProcessState.cpp'; then $(CYGPATH_W) 'phold/factory/src/ProcessState.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/ProcessState.cpp'; fi`

ProcessStub.o: phold/factory/src/ProcessStub.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProcessStub.o -MD -MP -MF $(DEPDIR)/ProcessStub.Tpo -c -o ProcessStub.o `test -f 'phold/factory/src/ProcessStub.cpp' || echo '$(srcdir)/'`phold/factory/src/ProcessStub.cpp
	$(am__mv) $(DEPDIR)/ProcessStub.Tpo $(DEPDIR)/ProcessStub.Po
#	source='phold/factory/src/ProcessStub.cpp' object='ProcessStub.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProcessStub.o `test -f 'phold/factory/src/ProcessStub.cpp' || echo '$(srcdir)/'`phold/factory/src/ProcessStub.cpp

ProcessStub.obj: phold/factory/src/ProcessStub.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ProcessStub.obj -MD -MP -MF $(DEPDIR)/ProcessStub.Tpo -c -o ProcessStub.obj `if test -f 'phold/factory/src/ProcessStub.cpp'; then $(CYGPATH_W) 'phold/factory/src/ProcessStub.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/ProcessStub.cpp'; fi`
	$(am__mv) $(DEPDIR)/ProcessStub.Tpo $(DEPDIR)/ProcessStub.Po
#	source='phold/factory/src/ProcessStub.cpp' object='ProcessStub.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ProcessStub.obj `if test -f 'phold/factory/src/ProcessStub.cpp'; then $(CYGPATH_W) 'phold/factory/src/ProcessStub.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/ProcessStub.cpp'; fi`

PHOLDMain.o: phold/factory/src/PHOLDMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PHOLDMain.o -MD -MP -MF $(DEPDIR)/PHOLDMain.Tpo -c -o PHOLDMain.o `test -f 'phold/factory/src/PHOLDMain.cpp' || echo '$(srcdir)/'`phold/factory/src/PHOLDMain.cpp
	$(am__mv) $(DEPDIR)/PHOLDMain.Tpo $(DEPDIR)/PHOLDMain.Po
#	source='phold/factory/src/PHOLDMain.cpp' object='PHOLDMain.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PHOLDMain.o `test -f 'phold/factory/src/PHOLDMain.cpp' || echo '$(srcdir)/'`phold/factory/src/PHOLDMain.cpp

PHOLDMain.obj: phold/factory/src/PHOLDMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PHOLDMain.obj -MD -MP -MF $(DEPDIR)/PHOLDMain.Tpo -c -o PHOLDMain.obj `if test -f 'phold/factory/src/PHOLDMain.cpp'; then $(CYGPATH_W) 'phold/factory/src/PHOLDMain.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/PHOLDMain.cpp'; fi`
	$(am__mv) $(DEPDIR)/PHOLDMain.Tpo $(DEPDIR)/PHOLDMain.Po
#	source='phold/factory/src/PHOLDMain.cpp' object='PHOLDMain.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PHOLDMain.obj `if test -f 'phold/factory/src/PHOLDMain.cpp'; then $(CYGPATH_W) 'phold/factory/src/PHOLDMain.cpp'; else $(CYGPATH_W) '$(srcdir)/phold/factory/src/PHOLDMain.cpp'; fi`

PingEvent.o: pingPong/PingEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PingEvent.o -MD -MP -MF $(DEPDIR)/PingEvent.Tpo -c -o PingEvent.o `test -f 'pingPong/PingEvent.cpp' || echo '$(srcdir)/'`pingPong/PingEvent.cpp
	$(am__mv) $(DEPDIR)/PingEvent.Tpo $(DEPDIR)/PingEvent.Po
#	source='pingPong/PingEvent.cpp' object='PingEvent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PingEvent.o `test -f 'pingPong/PingEvent.cpp' || echo '$(srcdir)/'`pingPong/PingEvent.cpp

PingEvent.obj: pingPong/PingEvent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PingEvent.obj -MD -MP -MF $(DEPDIR)/PingEvent.Tpo -c -o PingEvent.obj `if test -f 'pingPong/PingEvent.cpp'; then $(CYGPATH_W) 'pingPong/PingEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/pingPong/PingEvent.cpp'; fi`
	$(am__mv) $(DEPDIR)/PingEvent.Tpo $(DEPDIR)/PingEvent.Po
#	source='pingPong/PingEvent.cpp' object='PingEvent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PingEvent.obj `if test -f 'pingPong/PingEvent.cpp'; then $(CYGPATH_W) 'pingPong/PingEvent.cpp'; else $(CYGPATH_W) '$(srcdir)/pingPong/PingEvent.cpp'; fi`

PingObject.o: pingPong/PingObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PingObject.o -MD -MP -MF $(DEPDIR)/PingObject.Tpo -c -o PingObject.o `test -f 'pingPong/PingObject.cpp' || echo '$(srcdir)/'`pingPong/PingObject.cpp
	$(am__mv) $(DEPDIR)/PingObject.Tpo $(DEPDIR)/PingObject.Po
#	source='pingPong/PingObject.cpp' object='PingObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PingObject.o `test -f 'pingPong/PingObject.cpp' || echo '$(srcdir)/'`pingPong/PingObject.cpp

PingObject.obj: pingPong/PingObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PingObject.obj -MD -MP -MF $(DEPDIR)/PingObject.Tpo -c -o PingObject.obj `if test -f 'pingPong/PingObject.cpp'; then $(CYGPATH_W) 'pingPong/PingObject.cpp'; else $(CYGPATH_W) '$(srcdir)/pingPong/PingObject.cpp'; fi`
	$(am__mv) $(DEPDIR)/PingObject.Tpo $(DEPDIR)/PingObject.Po
#	source='pingPong/PingObject.cpp' object='PingObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PingObject.obj `if test -f 'pingPong/PingObject.cpp'; then $(CYGPATH_W) 'pingPong/PingObject.cpp'; else $(CYGPATH_W) '$(srcdir)/pingPong/PingObject.cpp'; fi`

PingPongApplication.o: pingPong/PingPongApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PingPongApplication.o -MD -MP -MF $(DEPDIR)/PingPongApplication.Tpo -c -o PingPongApplication.o `test -f 'pingPong/PingPongApplication.cpp' || echo '$(srcdir)/'`pingPong/PingPongApplication.cpp
	$(am__mv) $(DEPDIR)/PingPongApplication.Tpo $(DEPDIR)/PingPongApplication.Po
#	source='pingPong/PingPongApplication.cpp' object='PingPongApplication.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PingPongApplication.o `test -f 'pingPong/PingPongApplication.cpp' || echo '$(srcdir)/'`pingPong/PingPongApplication.cpp

PingPongApplication.obj: pingPong/PingPongApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PingPongApplication.obj -MD -MP -MF $(DEPDIR)/PingPongApplication.Tpo -c -o PingPongApplication.obj `if test -f 'pingPong/PingPongApplication.cpp'; then $(CYGPATH_W) 'pingPong/PingPongApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/pingPong/PingPongApplication.cpp'; fi`
	$(am__mv) $(DEPDIR)/PingPongApplication.Tpo $(DEPDIR)/PingPongApplication.Po
#	source='pingPong/PingPongApplication.cpp' object='PingPongApplication.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PingPongApplication.obj `if test -f 'pingPong/PingPongApplication.cpp'; then $(CYGPATH_W) 'pingPong/PingPongApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/pingPong/PingPongApplication.cpp'; fi`

main.o: pingPong/main.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT main.o -MD -MP -MF $(DEPDIR)/main.Tpo -c -o main.o `test -f 'pingPong/main.cpp' || echo '$(srcdir)/'`pingPong/main.cpp
	$(am__mv) $(DEPDIR)/main.Tpo $(DEPDIR)/main.Po
#	source='pingPong/main.cpp' object='main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o main.o `test -f 'pingPong/main.cpp' || echo '$(srcdir)/'`pingPong/main.cpp

main.obj: pingPong/main.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT main.obj -MD -MP -MF $(DEPDIR)/main.Tpo -c -o main.obj `if test -f 'pingPong/main.cpp'; then $(CYGPATH_W) 'pingPong/main.cpp'; else $(CYGPATH_W) '$(srcdir)/pingPong/main.cpp'; fi`
	$(am__mv) $(DEPDIR)/main.Tpo $(DEPDIR)/main.Po
#	source='pingPong/main.cpp' object='main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o main.obj `if test -f 'pingPong/main.cpp'; then $(CYGPATH_W) 'pingPong/main.cpp'; else $(CYGPATH_W) '$(srcdir)/pingPong/main.cpp'; fi`

RAIDDiskState.o: raid/factory/src/RAIDDiskState.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDDiskState.o -MD -MP -MF $(DEPDIR)/RAIDDiskState.Tpo -c -o RAIDDiskState.o `test -f 'raid/factory/src/RAIDDiskState.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDDiskState.cpp
	$(am__mv) $(DEPDIR)/RAIDDiskState.Tpo $(DEPDIR)/RAIDDiskState.Po
#	source='raid/factory/src/RAIDDiskState.cpp' object='RAIDDiskState.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDDiskState.o `test -f 'raid/factory/src/RAIDDiskState.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDDiskState.cpp

RAIDDiskState.obj: raid/factory/src/RAIDDiskState.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDDiskState.obj -MD -MP -MF $(DEPDIR)/RAIDDiskState.Tpo -c -o RAIDDiskState.obj `if test -f 'raid/factory/src/RAIDDiskState.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDDiskState.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDDiskState.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDDiskState.Tpo $(DEPDIR)/RAIDDiskState.Po
#	source='raid/factory/src/RAIDDiskState.cpp' object='RAIDDiskState.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDDiskState.obj `if test -f 'raid/factory/src/RAIDDiskState.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDDiskState.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDDiskState.cpp'; fi`

RAIDFork.o: raid/factory/src/RAIDFork.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDFork.o -MD -MP -MF $(DEPDIR)/RAIDFork.Tpo -c -o RAIDFork.o `test -f 'raid/factory/src/RAIDFork.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDFork.cpp
	$(am__mv) $(DEPDIR)/RAIDFork.Tpo $(DEPDIR)/RAIDFork.Po
#	source='raid/factory/src/RAIDFork.cpp' object='RAIDFork.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDFork.o `test -f 'raid/factory/src/RAIDFork.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDFork.cpp

RAIDFork.obj: raid/factory/src/RAIDFork.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDFork.obj -MD -MP -MF $(DEPDIR)/RAIDFork.Tpo -c -o RAIDFork.obj `if test -f 'raid/factory/src/RAIDFork.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDFork.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDFork.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDFork.Tpo $(DEPDIR)/RAIDFork.Po
#	source='raid/factory/src/RAIDFork.cpp' object='RAIDFork.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDFork.obj `if test -f 'raid/factory/src/RAIDFork.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDFork.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDFork.cpp'; fi`

RAIDProcess.o: raid/factory/src/RAIDProcess.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDProcess.o -MD -MP -MF $(DEPDIR)/RAIDProcess.Tpo -c -o RAIDProcess.o `test -f 'raid/factory/src/RAIDProcess.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDProcess.cpp
	$(am__mv) $(DEPDIR)/RAIDProcess.Tpo $(DEPDIR)/RAIDProcess.Po
#	source='raid/factory/src/RAIDProcess.cpp' object='RAIDProcess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDProcess.o `test -f 'raid/factory/src/RAIDProcess.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDProcess.cpp

RAIDProcess.obj: raid/factory/src/RAIDProcess.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDProcess.obj -MD -MP -MF $(DEPDIR)/RAIDProcess.Tpo -c -o RAIDProcess.obj `if test -f 'raid/factory/src/RAIDProcess.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDProcess.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDProcess.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDProcess.Tpo $(DEPDIR)/RAIDProcess.Po
#	source='raid/factory/src/RAIDProcess.cpp' object='RAIDProcess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDProcess.obj `if test -f 'raid/factory/src/RAIDProcess.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDProcess.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDProcess.cpp'; fi`

RAIDApplication.o: raid/factory/src/RAIDApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDApplication.o -MD -MP -MF $(DEPDIR)/RAIDApplication.Tpo -c -o RAIDApplication.o `test -f 'raid/factory/src/RAIDApplication.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDApplication.cpp
	$(am__mv) $(DEPDIR)/RAIDApplication.Tpo $(DEPDIR)/RAIDApplication.Po
#	source='raid/factory/src/RAIDApplication.cpp' object='RAIDApplication.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDApplication.o `test -f 'raid/factory/src/RAIDApplication.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDApplication.cpp

RAIDApplication.obj: raid/factory/src/RAIDApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDApplication.obj -MD -MP -MF $(DEPDIR)/RAIDApplication.Tpo -c -o RAIDApplication.obj `if test -f 'raid/factory/src/RAIDApplication.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDApplication.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDApplication.Tpo $(DEPDIR)/RAIDApplication.Po
#	source='raid/factory/src/RAIDApplication.cpp' object='RAIDApplication.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDApplication.obj `if test -f 'raid/factory/src/RAIDApplication.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDApplication.cpp'; fi`

RAIDDiskStub.o: raid/factory/src/RAIDDiskStub.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDDiskStub.o -MD -MP -MF $(DEPDIR)/RAIDDiskStub.Tpo -c -o RAIDDiskStub.o `test -f 'raid/factory/src/RAIDDiskStub.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDDiskStub.cpp
	$(am__mv) $(DEPDIR)/RAIDDiskStub.Tpo $(DEPDIR)/RAIDDiskStub.Po
#	source='raid/factory/src/RAIDDiskStub.cpp' object='RAIDDiskStub.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDDiskStub.o `test -f 'raid/factory/src/RAIDDiskStub.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDDiskStub.cpp

RAIDDiskStub.obj: raid/factory/src/RAIDDiskStub.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDDiskStub.obj -MD -MP -MF $(DEPDIR)/RAIDDiskStub.Tpo -c -o RAIDDiskStub.obj `if test -f 'raid/factory/src/RAIDDiskStub.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDDiskStub.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDDiskStub.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDDiskStub.Tpo $(DEPDIR)/RAIDDiskStub.Po
#	source='raid/factory/src/RAIDDiskStub.cpp' object='RAIDDiskStub.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDDiskStub.obj `if test -f 'raid/factory/src/RAIDDiskStub.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDDiskStub.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDDiskStub.cpp'; fi`

RAIDForkState.o: raid/factory/src/RAIDForkState.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDForkState.o -MD -MP -MF $(DEPDIR)/RAIDForkState.Tpo -c -o RAIDForkState.o `test -f 'raid/factory/src/RAIDForkState.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDForkState.cpp
	$(am__mv) $(DEPDIR)/RAIDForkState.Tpo $(DEPDIR)/RAIDForkState.Po
#	source='raid/factory/src/RAIDForkState.cpp' object='RAIDForkState.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDForkState.o `test -f 'raid/factory/src/RAIDForkState.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDForkState.cpp

RAIDForkState.obj: raid/factory/src/RAIDForkState.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDForkState.obj -MD -MP -MF $(DEPDIR)/RAIDForkState.Tpo -c -o RAIDForkState.obj `if test -f 'raid/factory/src/RAIDForkState.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDForkState.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDForkState.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDForkState.Tpo $(DEPDIR)/RAIDForkState.Po
#	source='raid/factory/src/RAIDForkState.cpp' object='RAIDForkState.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDForkState.obj `if test -f 'raid/factory/src/RAIDForkState.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDForkState.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDForkState.cpp'; fi`

RAIDProcessState.o: raid/factory/src/RAIDProcessState.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDProcessState.o -MD -MP -MF $(DEPDIR)/RAIDProcessState.Tpo -c -o RAIDProcessState.o `test -f 'raid/factory/src/RAIDProcessState.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDProcessState.cpp
	$(am__mv) $(DEPDIR)/RAIDProcessState.Tpo $(DEPDIR)/RAIDProcessState.Po
#	source='raid/factory/src/RAIDProcessState.cpp' object='RAIDProcessState.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDProcessState.o `test -f 'raid/factory/src/RAIDProcessState.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDProcessState.cpp

RAIDProcessState.obj: raid/factory/src/RAIDProcessState.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDProcessState.obj -MD -MP -MF $(DEPDIR)/RAIDProcessState.Tpo -c -o RAIDProcessState.obj `if test -f 'raid/factory/src/RAIDProcessState.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDProcessState.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDProcessState.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDProcessState.Tpo $(DEPDIR)/RAIDProcessState.Po
#	source='raid/factory/src/RAIDProcessState.cpp' object='RAIDProcessState.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDProcessState.obj `if test -f 'raid/factory/src/RAIDProcessState.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDProcessState.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDProcessState.cpp'; fi`

RAIDDisk.o: raid/factory/src/RAIDDisk.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDDisk.o -MD -MP -MF $(DEPDIR)/RAIDDisk.Tpo -c -o RAIDDisk.o `test -f 'raid/factory/src/RAIDDisk.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDDisk.cpp
	$(am__mv) $(DEPDIR)/RAIDDisk.Tpo $(DEPDIR)/RAIDDisk.Po
#	source='raid/factory/src/RAIDDisk.cpp' object='RAIDDisk.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDDisk.o `test -f 'raid/factory/src/RAIDDisk.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDDisk.cpp

RAIDDisk.obj: raid/factory/src/RAIDDisk.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDDisk.obj -MD -MP -MF $(DEPDIR)/RAIDDisk.Tpo -c -o RAIDDisk.obj `if test -f 'raid/factory/src/RAIDDisk.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDDisk.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDDisk.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDDisk.Tpo $(DEPDIR)/RAIDDisk.Po
#	source='raid/factory/src/RAIDDisk.cpp' object='RAIDDisk.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDDisk.obj `if test -f 'raid/factory/src/RAIDDisk.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDDisk.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDDisk.cpp'; fi`

RAIDFactoryManager.o: raid/factory/src/RAIDFactoryManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDFactoryManager.o -MD -MP -MF $(DEPDIR)/RAIDFactoryManager.Tpo -c -o RAIDFactoryManager.o `test -f 'raid/factory/src/RAIDFactoryManager.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDFactoryManager.cpp
	$(am__mv) $(DEPDIR)/RAIDFactoryManager.Tpo $(DEPDIR)/RAIDFactoryManager.Po
#	source='raid/factory/src/RAIDFactoryManager.cpp' object='RAIDFactoryManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDFactoryManager.o `test -f 'raid/factory/src/RAIDFactoryManager.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDFactoryManager.cpp

RAIDFactoryManager.obj: raid/factory/src/RAIDFactoryManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDFactoryManager.obj -MD -MP -MF $(DEPDIR)/RAIDFactoryManager.Tpo -c -o RAIDFactoryManager.obj `if test -f 'raid/factory/src/RAIDFactoryManager.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDFactoryManager.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDFactoryManager.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDFactoryManager.Tpo $(DEPDIR)/RAIDFactoryManager.Po
#	source='raid/factory/src/RAIDFactoryManager.cpp' object='RAIDFactoryManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDFactoryManager.obj `if test -f 'raid/factory/src/RAIDFactoryManager.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDFactoryManager.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDFactoryManager.cpp'; fi`

RAIDForkStub.o: raid/factory/src/RAIDForkStub.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDForkStub.o -MD -MP -MF $(DEPDIR)/RAIDForkStub.Tpo -c -o RAIDForkStub.o `test -f 'raid/factory/src/RAIDForkStub.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDForkStub.cpp
	$(am__mv) $(DEPDIR)/RAIDForkStub.Tpo $(DEPDIR)/RAIDForkStub.Po
#	source='raid/factory/src/RAIDForkStub.cpp' object='RAIDForkStub.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDForkStub.o `test -f 'raid/factory/src/RAIDForkStub.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDForkStub.cpp

RAIDForkStub.obj: raid/factory/src/RAIDForkStub.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDForkStub.obj -MD -MP -MF $(DEPDIR)/RAIDForkStub.Tpo -c -o RAIDForkStub.obj `if test -f 'raid/factory/src/RAIDForkStub.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDForkStub.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDForkStub.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDForkStub.Tpo $(DEPDIR)/RAIDForkStub.Po
#	source='raid/factory/src/RAIDForkStub.cpp' object='RAIDForkStub.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDForkStub.obj `if test -f 'raid/factory/src/RAIDForkStub.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDForkStub.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDForkStub.cpp'; fi`

RAIDProcessStub.o: raid/factory/src/RAIDProcessStub.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDProcessStub.o -MD -MP -MF $(DEPDIR)/RAIDProcessStub.Tpo -c -o RAIDProcessStub.o `test -f 'raid/factory/src/RAIDProcessStub.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDProcessStub.cpp
	$(am__mv) $(DEPDIR)/RAIDProcessStub.Tpo $(DEPDIR)/RAIDProcessStub.Po
#	source='raid/factory/src/RAIDProcessStub.cpp' object='RAIDProcessStub.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDProcessStub.o `test -f 'raid/factory/src/RAIDProcessStub.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDProcessStub.cpp

RAIDProcessStub.obj: raid/factory/src/RAIDProcessStub.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDProcessStub.obj -MD -MP -MF $(DEPDIR)/RAIDProcessStub.Tpo -c -o RAIDProcessStub.obj `if test -f 'raid/factory/src/RAIDProcessStub.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDProcessStub.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDProcessStub.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDProcessStub.Tpo $(DEPDIR)/RAIDProcessStub.Po
#	source='raid/factory/src/RAIDProcessStub.cpp' object='RAIDProcessStub.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDProcessStub.obj `if test -f 'raid/factory/src/RAIDProcessStub.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDProcessStub.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDProcessStub.cpp'; fi`

RAIDMain.o: raid/factory/src/RAIDMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDMain.o -MD -MP -MF $(DEPDIR)/RAIDMain.Tpo -c -o RAIDMain.o `test -f 'raid/factory/src/RAIDMain.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDMain.cpp
	$(am__mv) $(DEPDIR)/RAIDMain.Tpo $(DEPDIR)/RAIDMain.Po
#	source='raid/factory/src/RAIDMain.cpp' object='RAIDMain.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDMain.o `test -f 'raid/factory/src/RAIDMain.cpp' || echo '$(srcdir)/'`raid/factory/src/RAIDMain.cpp

RAIDMain.obj: raid/factory/src/RAIDMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RAIDMain.obj -MD -MP -MF $(DEPDIR)/RAIDMain.Tpo -c -o RAIDMain.obj `if test -f 'raid/factory/src/RAIDMain.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDMain.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDMain.cpp'; fi`
	$(am__mv) $(DEPDIR)/RAIDMain.Tpo $(DEPDIR)/RAIDMain.Po
#	source='raid/factory/src/RAIDMain.cpp' object='RAIDMain.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RAIDMain.obj `if test -f 'raid/factory/src/RAIDMain.cpp'; then $(CYGPATH_W) 'raid/factory/src/RAIDMain.cpp'; else $(CYGPATH_W) '$(srcdir)/raid/factory/src/RAIDMain.cpp'; fi`

SMMPApplication.o: smmp/SMMPApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPApplication.o -MD -MP -MF $(DEPDIR)/SMMPApplication.Tpo -c -o SMMPApplication.o `test -f 'smmp/SMMPApplication.cpp' || echo '$(srcdir)/'`smmp/SMMPApplication.cpp
	$(am__mv) $(DEPDIR)/SMMPApplication.Tpo $(DEPDIR)/SMMPApplication.Po
#	source='smmp/SMMPApplication.cpp' object='SMMPApplication.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPApplication.o `test -f 'smmp/SMMPApplication.cpp' || echo '$(srcdir)/'`smmp/SMMPApplication.cpp

SMMPApplication.obj: smmp/SMMPApplication.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPApplication.obj -MD -MP -MF $(DEPDIR)/SMMPApplication.Tpo -c -o SMMPApplication.obj `if test -f 'smmp/SMMPApplication.cpp'; then $(CYGPATH_W) 'smmp/SMMPApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPApplication.cpp'; fi`
	$(am__mv) $(DEPDIR)/SMMPApplication.Tpo $(DEPDIR)/SMMPApplication.Po
#	source='smmp/SMMPApplication.cpp' object='SMMPApplication.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPApplication.obj `if test -f 'smmp/SMMPApplication.cpp'; then $(CYGPATH_W) 'smmp/SMMPApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPApplication.cpp'; fi`

SMMPMain.o: smmp/SMMPMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPMain.o -MD -MP -MF $(DEPDIR)/SMMPMain.Tpo -c -o SMMPMain.o `test -f 'smmp/SMMPMain.cpp' || echo '$(srcdir)/'`smmp/SMMPMain.cpp
	$(am__mv) $(DEPDIR)/SMMPMain.Tpo $(DEPDIR)/SMMPMain.Po
#	source='smmp/SMMPMain.cpp' object='SMMPMain.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPMain.o `test -f 'smmp/SMMPMain.cpp' || echo '$(srcdir)/'`smmp/SMMPMain.cpp

SMMPMain.obj: smmp/SMMPMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPMain.obj -MD -MP -MF $(DEPDIR)/SMMPMain.Tpo -c -o SMMPMain.obj `if test -f 'smmp/SMMPMain.cpp'; then $(CYGPATH_W) 'smmp/SMMPMain.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPMain.cpp'; fi`
	$(am__mv) $(DEPDIR)/SMMPMain.Tpo $(DEPDIR)/SMMPMain.Po
#	source='smmp/SMMPMain.cpp' object='SMMPMain.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPMain.obj `if test -f 'smmp/SMMPMain.cpp'; then $(CYGPATH_W) 'smmp/SMMPMain.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPMain.cpp'; fi`

SMMPForkObject.o: smmp/SMMPForkObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPForkObject.o -MD -MP -MF $(DEPDIR)/SMMPForkObject.Tpo -c -o SMMPForkObject.o `test -f 'smmp/SMMPForkObject.cpp' || echo '$(srcdir)/'`smmp/SMMPForkObject.cpp
	$(am__mv) $(DEPDIR)/SMMPForkObject.Tpo $(DEPDIR)/SMMPForkObject.Po
#	source='smmp/SMMPForkObject.cpp' object='SMMPForkObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPForkObject.o `test -f 'smmp/SMMPForkObject.cpp' || echo '$(srcdir)/'`smmp/SMMPForkObject.cpp

SMMPForkObject.obj: smmp/SMMPForkObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPForkObject.obj -MD -MP -MF $(DEPDIR)/SMMPForkObject.Tpo -c -o SMMPForkObject.obj `if test -f 'smmp/SMMPForkObject.cpp'; then $(CYGPATH_W) 'smmp/SMMPForkObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPForkObject.cpp'; fi`
	$(am__mv) $(DEPDIR)/SMMPForkObject.Tpo $(DEPDIR)/SMMPForkObject.Po
#	source='smmp/SMMPForkObject.cpp' object='SMMPForkObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPForkObject.obj `if test -f 'smmp/SMMPForkObject.cpp'; then $(CYGPATH_W) 'smmp/SMMPForkObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPForkObject.cpp'; fi`

SMMPJoinObject.o: smmp/SMMPJoinObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPJoinObject.o -MD -MP -MF $(DEPDIR)/SMMPJoinObject.Tpo -c -o SMMPJoinObject.o `test -f 'smmp/SMMPJoinObject.cpp' || echo '$(srcdir)/'`smmp/SMMPJoinObject.cpp
	$(am__mv) $(DEPDIR)/SMMPJoinObject.Tpo $(DEPDIR)/SMMPJoinObject.Po
#	source='smmp/SMMPJoinObject.cpp' object='SMMPJoinObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPJoinObject.o `test -f 'smmp/SMMPJoinObject.cpp' || echo '$(srcdir)/'`smmp/SMMPJoinObject.cpp

SMMPJoinObject.obj: smmp/SMMPJoinObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPJoinObject.obj -MD -MP -MF $(DEPDIR)/SMMPJoinObject.Tpo -c -o SMMPJoinObject.obj `if test -f 'smmp/SMMPJoinObject.cpp'; then $(CYGPATH_W) 'smmp/SMMPJoinObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPJoinObject.cpp'; fi`
	$(am__mv) $(DEPDIR)/SMMPJoinObject.Tpo $(DEPDIR)/SMMPJoinObject.Po
#	source='smmp/SMMPJoinObject.cpp' object='SMMPJoinObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPJoinObject.obj `if test -f 'smmp/SMMPJoinObject.cpp'; then $(CYGPATH_W) 'smmp/SMMPJoinObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPJoinObject.cpp'; fi`

MemRouterObject.o: smmp/MemRouterObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MemRouterObject.o -MD -MP -MF $(DEPDIR)/MemRouterObject.Tpo -c -o MemRouterObject.o `test -f 'smmp/MemRouterObject.cpp' || echo '$(srcdir)/'`smmp/MemRouterObject.cpp
	$(am__mv) $(DEPDIR)/MemRouterObject.Tpo $(DEPDIR)/MemRouterObject.Po
#	source='smmp/MemRouterObject.cpp' object='MemRouterObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MemRouterObject.o `test -f 'smmp/MemRouterObject.cpp' || echo '$(srcdir)/'`smmp/MemRouterObject.cpp

MemRouterObject.obj: smmp/MemRouterObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MemRouterObject.obj -MD -MP -MF $(DEPDIR)/MemRouterObject.Tpo -c -o MemRouterObject.obj `if test -f 'smmp/MemRouterObject.cpp'; then $(CYGPATH_W) 'smmp/MemRouterObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/MemRouterObject.cpp'; fi`
	$(am__mv) $(DEPDIR)/MemRouterObject.Tpo $(DEPDIR)/MemRouterObject.Po
#	source='smmp/MemRouterObject.cpp' object='MemRouterObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MemRouterObject.obj `if test -f 'smmp/MemRouterObject.cpp'; then $(CYGPATH_W) 'smmp/MemRouterObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/MemRouterObject.cpp'; fi`

MemSourceObject.o: smmp/MemSourceObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MemSourceObject.o -MD -MP -MF $(DEPDIR)/MemSourceObject.Tpo -c -o MemSourceObject.o `test -f 'smmp/MemSourceObject.cpp' || echo '$(srcdir)/'`smmp/MemSourceObject.cpp
	$(am__mv) $(DEPDIR)/MemSourceObject.Tpo $(DEPDIR)/MemSourceObject.Po
#	source='smmp/MemSourceObject.cpp' object='MemSourceObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MemSourceObject.o `test -f 'smmp/MemSourceObject.cpp' || echo '$(srcdir)/'`smmp/MemSourceObject.cpp

MemSourceObject.obj: smmp/MemSourceObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MemSourceObject.obj -MD -MP -MF $(DEPDIR)/MemSourceObject.Tpo -c -o MemSourceObject.obj `if test -f 'smmp/MemSourceObject.cpp'; then $(CYGPATH_W) 'smmp/MemSourceObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/MemSourceObject.cpp'; fi`
	$(am__mv) $(DEPDIR)/MemSourceObject.Tpo $(DEPDIR)/MemSourceObject.Po
#	source='smmp/MemSourceObject.cpp' object='MemSourceObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MemSourceObject.obj `if test -f 'smmp/MemSourceObject.cpp'; then $(CYGPATH_W) 'smmp/MemSourceObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/MemSourceObject.cpp'; fi`

SMMPPartitioner.o: smmp/SMMPPartitioner.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPPartitioner.o -MD -MP -MF $(DEPDIR)/SMMPPartitioner.Tpo -c -o SMMPPartitioner.o `test -f 'smmp/SMMPPartitioner.cpp' || echo '$(srcdir)/'`smmp/SMMPPartitioner.cpp
	$(am__mv) $(DEPDIR)/SMMPPartitioner.Tpo $(DEPDIR)/SMMPPartitioner.Po
#	source='smmp/SMMPPartitioner.cpp' object='SMMPPartitioner.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPPartitioner.o `test -f 'smmp/SMMPPartitioner.cpp' || echo '$(srcdir)/'`smmp/SMMPPartitioner.cpp

SMMPPartitioner.obj: smmp/SMMPPartitioner.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPPartitioner.obj -MD -MP -MF $(DEPDIR)/SMMPPartitioner.Tpo -c -o SMMPPartitioner.obj `if test -f 'smmp/SMMPPartitioner.cpp'; then $(CYGPATH_W) 'smmp/SMMPPartitioner.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPPartitioner.cpp'; fi`
	$(am__mv) $(DEPDIR)/SMMPPartitioner.Tpo $(DEPDIR)/SMMPPartitioner.Po
#	source='smmp/SMMPPartitioner.cpp' object='SMMPPartitioner.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPPartitioner.obj `if test -f 'smmp/SMMPPartitioner.cpp'; then $(CYGPATH_W) 'smmp/SMMPPartitioner.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPPartitioner.cpp'; fi`

SMMPQueueObject.o: smmp/SMMPQueueObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPQueueObject.o -MD -MP -MF $(DEPDIR)/SMMPQueueObject.Tpo -c -o SMMPQueueObject.o `test -f 'smmp/SMMPQueueObject.cpp' || echo '$(srcdir)/'`smmp/SMMPQueueObject.cpp
	$(am__mv) $(DEPDIR)/SMMPQueueObject.Tpo $(DEPDIR)/SMMPQueueObject.Po
#	source='smmp/SMMPQueueObject.cpp' object='SMMPQueueObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPQueueObject.o `test -f 'smmp/SMMPQueueObject.cpp' || echo '$(srcdir)/'`smmp/SMMPQueueObject.cpp

SMMPQueueObject.obj: smmp/SMMPQueueObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPQueueObject.obj -MD -MP -MF $(DEPDIR)/SMMPQueueObject.Tpo -c -o SMMPQueueObject.obj `if test -f 'smmp/SMMPQueueObject.cpp'; then $(CYGPATH_W) 'smmp/SMMPQueueObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPQueueObject.cpp'; fi`
	$(am__mv) $(DEPDIR)/SMMPQueueObject.Tpo $(DEPDIR)/SMMPQueueObject.Po
#	source='smmp/SMMPQueueObject.cpp' object='SMMPQueueObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPQueueObject.obj `if test -f 'smmp/SMMPQueueObject.cpp'; then $(CYGPATH_W) 'smmp/SMMPQueueObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPQueueObject.cpp'; fi`

SMMPServerObject.o: smmp/SMMPServerObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPServerObject.o -MD -MP -MF $(DEPDIR)/SMMPServerObject.Tpo -c -o SMMPServerObject.o `test -f 'smmp/SMMPServerObject.cpp' || echo '$(srcdir)/'`smmp/SMMPServerObject.cpp
	$(am__mv) $(DEPDIR)/SMMPServerObject.Tpo $(DEPDIR)/SMMPServerObject.Po
#	source='smmp/SMMPServerObject.cpp' object='SMMPServerObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPServerObject.o `test -f 'smmp/SMMPServerObject.cpp' || echo '$(srcdir)/'`smmp/SMMPServerObject.cpp

SMMPServerObject.obj: smmp/SMMPServerObject.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SMMPServerObject.obj -MD -MP -MF $(DEPDIR)/SMMPServerObject.Tpo -c -o SMMPServerObject.obj `if test -f 'smmp/SMMPServerObject.cpp'; then $(CYGPATH_W) 'smmp/SMMPServerObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPServerObject.cpp'; fi`
	$(am__mv) $(DEPDIR)/SMMPServerObject.Tpo $(DEPDIR)/SMMPServerObject.Po
#	source='smmp/SMMPServerObject.cpp' object='SMMPServerObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SMMPServerObject.obj `if test -f 'smmp/SMMPServerObject.cpp'; then $(CYGPATH_W) 'smmp/SMMPServerObject.cpp'; else $(CYGPATH_W) '$(srcdir)/smmp/SMMPServerObject.cpp'; fi`

warpedUnitTestsMain.o: warped/warpedUnitTestsMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT warpedUnitTestsMain.o -MD -MP -MF $(DEPDIR)/warpedUnitTestsMain.Tpo -c -o warpedUnitTestsMain.o `test -f 'warped/warpedUnitTestsMain.cpp' || echo '$(srcdir)/'`warped/warpedUnitTestsMain.cpp
	$(am__mv) $(DEPDIR)/warpedUnitTestsMain.Tpo $(DEPDIR)/warpedUnitTestsMain.Po
#	source='warped/warpedUnitTestsMain.cpp' object='warpedUnitTestsMain.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o warpedUnitTestsMain.o `test -f 'warped/warpedUnitTestsMain.cpp' || echo '$(srcdir)/'`warped/warpedUnitTestsMain.cpp

warpedUnitTestsMain.obj: warped/warpedUnitTestsMain.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT warpedUnitTestsMain.obj -MD -MP -MF $(DEPDIR)/warpedUnitTestsMain.Tpo -c -o warpedUnitTestsMain.obj `if test -f 'warped/warpedUnitTestsMain.cpp'; then $(CYGPATH_W) 'warped/warpedUnitTestsMain.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/warpedUnitTestsMain.cpp'; fi`
	$(am__mv) $(DEPDIR)/warpedUnitTestsMain.Tpo $(DEPDIR)/warpedUnitTestsMain.Po
#	source='warped/warpedUnitTestsMain.cpp' object='warpedUnitTestsMain.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o warpedUnitTestsMain.obj `if test -f 'warped/warpedUnitTestsMain.cpp'; then $(CYGPATH_W) 'warped/warpedUnitTestsMain.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/warpedUnitTestsMain.cpp'; fi`

AdaptiveOutputManagerTest.o: warped/AdaptiveOutputManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AdaptiveOutputManagerTest.o -MD -MP -MF $(DEPDIR)/AdaptiveOutputManagerTest.Tpo -c -o AdaptiveOutputManagerTest.o `test -f 'warped/AdaptiveOutputManagerTest.cpp' || echo '$(srcdir)/'`warped/AdaptiveOutputManagerTest.cpp
	$(am__mv) $(DEPDIR)/AdaptiveOutputManagerTest.Tpo $(DEPDIR)/AdaptiveOutputManagerTest.Po
#	source='warped/AdaptiveOutputManagerTest.cpp' object='AdaptiveOutputManagerTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AdaptiveOutputManagerTest.o `test -f 'warped/AdaptiveOutputManagerTest.cpp' || echo '$(srcdir)/'`warped/AdaptiveOutputManagerTest.cpp

AdaptiveOutputManagerTest.obj: warped/AdaptiveOutputManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AdaptiveOutputManagerTest.obj -MD -MP -MF $(DEPDIR)/AdaptiveOutputManagerTest.Tpo -c -o AdaptiveOutputManagerTest.obj `if test -f 'warped/AdaptiveOutputManagerTest.cpp'; then $(CYGPATH_W) 'warped/AdaptiveOutputManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/AdaptiveOutputManagerTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/AdaptiveOutputManagerTest.Tpo $(DEPDIR)/AdaptiveOutputManagerTest.Po
#	source='warped/AdaptiveOutputManagerTest.cpp' object='AdaptiveOutputManagerTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AdaptiveOutputManagerTest.obj `if test -f 'warped/AdaptiveOutputManagerTest.cpp'; then $(CYGPATH_W) 'warped/AdaptiveOutputManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/AdaptiveOutputManagerTest.cpp'; fi`

AdaptiveStateManagerBaseTest.o: warped/AdaptiveStateManagerBaseTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AdaptiveStateManagerBaseTest.o -MD -MP -MF $(DEPDIR)/AdaptiveStateManagerBaseTest.Tpo -c -o AdaptiveStateManagerBaseTest.o `test -f 'warped/AdaptiveStateManagerBaseTest.cpp' || echo '$(srcdir)/'`warped/AdaptiveStateManagerBaseTest.cpp
	$(am__mv) $(DEPDIR)/AdaptiveStateManagerBaseTest.Tpo $(DEPDIR)/AdaptiveStateManagerBaseTest.Po
#	source='warped/AdaptiveStateManagerBaseTest.cpp' object='AdaptiveStateManagerBaseTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AdaptiveStateManagerBaseTest.o `test -f 'warped/AdaptiveStateManagerBaseTest.cpp' || echo '$(srcdir)/'`warped/AdaptiveStateManagerBaseTest.cpp

AdaptiveStateManagerBaseTest.obj: warped/AdaptiveStateManagerBaseTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AdaptiveStateManagerBaseTest.obj -MD -MP -MF $(DEPDIR)/AdaptiveStateManagerBaseTest.Tpo -c -o AdaptiveStateManagerBaseTest.obj `if test -f 'warped/AdaptiveStateManagerBaseTest.cpp'; then $(CYGPATH_W) 'warped/AdaptiveStateManagerBaseTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/AdaptiveStateManagerBaseTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/AdaptiveStateManagerBaseTest.Tpo $(DEPDIR)/AdaptiveStateManagerBaseTest.Po
#	source='warped/AdaptiveStateManagerBaseTest.cpp' object='AdaptiveStateManagerBaseTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AdaptiveStateManagerBaseTest.obj `if test -f 'warped/AdaptiveStateManagerBaseTest.cpp'; then $(CYGPATH_W) 'warped/AdaptiveStateManagerBaseTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/AdaptiveStateManagerBaseTest.cpp'; fi`

AggressiveOutputManagerTest.o: warped/AggressiveOutputManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AggressiveOutputManagerTest.o -MD -MP -MF $(DEPDIR)/AggressiveOutputManagerTest.Tpo -c -o AggressiveOutputManagerTest.o `test -f 'warped/AggressiveOutputManagerTest.cpp' || echo '$(srcdir)/'`warped/AggressiveOutputManagerTest.cpp
	$(am__mv) $(DEPDIR)/AggressiveOutputManagerTest.Tpo $(DEPDIR)/AggressiveOutputManagerTest.Po
#	source='warped/AggressiveOutputManagerTest.cpp' object='AggressiveOutputManagerTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AggressiveOutputManagerTest.o `test -f 'warped/AggressiveOutputManagerTest.cpp' || echo '$(srcdir)/'`warped/AggressiveOutputManagerTest.cpp

AggressiveOutputManagerTest.obj: warped/AggressiveOutputManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AggressiveOutputManagerTest.obj -MD -MP -MF $(DEPDIR)/AggressiveOutputManagerTest.Tpo -c -o AggressiveOutputManagerTest.obj `if test -f 'warped/AggressiveOutputManagerTest.cpp'; then $(CYGPATH_W) 'warped/AggressiveOutputManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/AggressiveOutputManagerTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/AggressiveOutputManagerTest.Tpo $(DEPDIR)/AggressiveOutputManagerTest.Po
#	source='warped/AggressiveOutputManagerTest.cpp' object='AggressiveOutputManagerTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AggressiveOutputManagerTest.obj `if test -f 'warped/AggressiveOutputManagerTest.cpp'; then $(CYGPATH_W) 'warped/AggressiveOutputManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/AggressiveOutputManagerTest.cpp'; fi`

CirculateInitializationMessageTest.o: warped/CirculateInitializationMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CirculateInitializationMessageTest.o -MD -MP -MF $(DEPDIR)/CirculateInitializationMessageTest.Tpo -c -o CirculateInitializationMessageTest.o `test -f 'warped/CirculateInitializationMessageTest.cpp' || echo '$(srcdir)/'`warped/CirculateInitializationMessageTest.cpp
	$(am__mv) $(DEPDIR)/CirculateInitializationMessageTest.Tpo $(DEPDIR)/CirculateInitializationMessageTest.Po
#	source='warped/CirculateInitializationMessageTest.cpp' object='CirculateInitializationMessageTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CirculateInitializationMessageTest.o `test -f 'warped/CirculateInitializationMessageTest.cpp' || echo '$(srcdir)/'`warped/CirculateInitializationMessageTest.cpp

CirculateInitializationMessageTest.obj: warped/CirculateInitializationMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CirculateInitializationMessageTest.obj -MD -MP -MF $(DEPDIR)/CirculateInitializationMessageTest.Tpo -c -o CirculateInitializationMessageTest.obj `if test -f 'warped/CirculateInitializationMessageTest.cpp'; then $(CYGPATH_W) 'warped/CirculateInitializationMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/CirculateInitializationMessageTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/CirculateInitializationMessageTest.Tpo $(DEPDIR)/CirculateInitializationMessageTest.Po
#	source='warped/CirculateInitializationMessageTest.cpp' object='CirculateInitializationMessageTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CirculateInitializationMessageTest.obj `if test -f 'warped/CirculateInitializationMessageTest.cpp'; then $(CYGPATH_W) 'warped/CirculateInitializationMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/CirculateInitializationMessageTest.cpp'; fi`

CostAdaptiveStateManagerTest.o: warped/CostAdaptiveStateManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CostAdaptiveStateManagerTest.o -MD -MP -MF $(DEPDIR)/CostAdaptiveStateManagerTest.Tpo -c -o CostAdaptiveStateManagerTest.o `test -f 'warped/CostAdaptiveStateManagerTest.cpp' || echo '$(srcdir)/'`warped/CostAdaptiveStateManagerTest.cpp
	$(am__mv) $(DEPDIR)/CostAdaptiveStateManagerTest.Tpo $(DEPDIR)/CostAdaptiveStateManagerTest.Po
#	source='warped/CostAdaptiveStateManagerTest.cpp' object='CostAdaptiveStateManagerTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CostAdaptiveStateManagerTest.o `test -f 'warped/CostAdaptiveStateManagerTest.cpp' || echo '$(srcdir)/'`warped/CostAdaptiveStateManagerTest.cpp

CostAdaptiveStateManagerTest.obj: warped/CostAdaptiveStateManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CostAdaptiveStateManagerTest.obj -MD -MP -MF $(DEPDIR)/CostAdaptiveStateManagerTest.Tpo -c -o CostAdaptiveStateManagerTest.obj `if test -f 'warped/CostAdaptiveStateManagerTest.cpp'; then $(CYGPATH_W) 'warped/CostAdaptiveStateManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/CostAdaptiveStateManagerTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/CostAdaptiveStateManagerTest.Tpo $(DEPDIR)/CostAdaptiveStateManagerTest.Po
#	source='warped/CostAdaptiveStateManagerTest.cpp' object='CostAdaptiveStateManagerTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CostAdaptiveStateManagerTest.obj `if test -f 'warped/CostAdaptiveStateManagerTest.cpp'; then $(CYGPATH_W) 'warped/CostAdaptiveStateManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/CostAdaptiveStateManagerTest.cpp'; fi`

DefaultSchedulingManagerTest.o: warped/DefaultSchedulingManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DefaultSchedulingManagerTest.o -MD -MP -MF $(DEPDIR)/DefaultSchedulingManagerTest.Tpo -c -o DefaultSchedulingManagerTest.o `test -f 'warped/DefaultSchedulingManagerTest.cpp' || echo '$(srcdir)/'`warped/DefaultSchedulingManagerTest.cpp
	$(am__mv) $(DEPDIR)/DefaultSchedulingManagerTest.Tpo $(DEPDIR)/DefaultSchedulingManagerTest.Po
#	source='warped/DefaultSchedulingManagerTest.cpp' object='DefaultSchedulingManagerTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DefaultSchedulingManagerTest.o `test -f 'warped/DefaultSchedulingManagerTest.cpp' || echo '$(srcdir)/'`warped/DefaultSchedulingManagerTest.cpp

DefaultSchedulingManagerTest.obj: warped/DefaultSchedulingManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DefaultSchedulingManagerTest.obj -MD -MP -MF $(DEPDIR)/DefaultSchedulingManagerTest.Tpo -c -o DefaultSchedulingManagerTest.obj `if test -f 'warped/DefaultSchedulingManagerTest.cpp'; then $(CYGPATH_W) 'warped/DefaultSchedulingManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/DefaultSchedulingManagerTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/DefaultSchedulingManagerTest.Tpo $(DEPDIR)/DefaultSchedulingManagerTest.Po
#	source='warped/DefaultSchedulingManagerTest.cpp' object='DefaultSchedulingManagerTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DefaultSchedulingManagerTest.obj `if test -f 'warped/DefaultSchedulingManagerTest.cpp'; then $(CYGPATH_W) 'warped/DefaultSchedulingManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/DefaultSchedulingManagerTest.cpp'; fi`

DefaultTimeWarpEventSetTest.o: warped/DefaultTimeWarpEventSetTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DefaultTimeWarpEventSetTest.o -MD -MP -MF $(DEPDIR)/DefaultTimeWarpEventSetTest.Tpo -c -o DefaultTimeWarpEventSetTest.o `test -f 'warped/DefaultTimeWarpEventSetTest.cpp' || echo '$(srcdir)/'`warped/DefaultTimeWarpEventSetTest.cpp
	$(am__mv) $(DEPDIR)/DefaultTimeWarpEventSetTest.Tpo $(DEPDIR)/DefaultTimeWarpEventSetTest.Po
#	source='warped/DefaultTimeWarpEventSetTest.cpp' object='DefaultTimeWarpEventSetTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DefaultTimeWarpEventSetTest.o `test -f 'warped/DefaultTimeWarpEventSetTest.cpp' || echo '$(srcdir)/'`warped/DefaultTimeWarpEventSetTest.cpp

DefaultTimeWarpEventSetTest.obj: warped/DefaultTimeWarpEventSetTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DefaultTimeWarpEventSetTest.obj -MD -MP -MF $(DEPDIR)/DefaultTimeWarpEventSetTest.Tpo -c -o DefaultTimeWarpEventSetTest.obj `if test -f 'warped/DefaultTimeWarpEventSetTest.cpp'; then $(CYGPATH_W) 'warped/DefaultTimeWarpEventSetTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/DefaultTimeWarpEventSetTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/DefaultTimeWarpEventSetTest.Tpo $(DEPDIR)/DefaultTimeWarpEventSetTest.Po
#	source='warped/DefaultTimeWarpEventSetTest.cpp' object='DefaultTimeWarpEventSetTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DefaultTimeWarpEventSetTest.obj `if test -f 'warped/DefaultTimeWarpEventSetTest.cpp'; then $(CYGPATH_W) 'warped/DefaultTimeWarpEventSetTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/DefaultTimeWarpEventSetTest.cpp'; fi`

DefaultTimeWarpEventSetOneAntiMsgTest.o: warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DefaultTimeWarpEventSetOneAntiMsgTest.o -MD -MP -MF $(DEPDIR)/DefaultTimeWarpEventSetOneAntiMsgTest.Tpo -c -o DefaultTimeWarpEventSetOneAntiMsgTest.o `test -f 'warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp' || echo '$(srcdir)/'`warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp
	$(am__mv) $(DEPDIR)/DefaultTimeWarpEventSetOneAntiMsgTest.Tpo $(DEPDIR)/DefaultTimeWarpEventSetOneAntiMsgTest.Po
#	source='warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp' object='DefaultTimeWarpEventSetOneAntiMsgTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DefaultTimeWarpEventSetOneAntiMsgTest.o `test -f 'warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp' || echo '$(srcdir)/'`warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp

DefaultTimeWarpEventSetOneAntiMsgTest.obj: warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DefaultTimeWarpEventSetOneAntiMsgTest.obj -MD -MP -MF $(DEPDIR)/DefaultTimeWarpEventSetOneAntiMsgTest.Tpo -c -o DefaultTimeWarpEventSetOneAntiMsgTest.obj `if test -f 'warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp'; then $(CYGPATH_W) 'warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/DefaultTimeWarpEventSetOneAntiMsgTest.Tpo $(DEPDIR)/DefaultTimeWarpEventSetOneAntiMsgTest.Po
#	source='warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp' object='DefaultTimeWarpEventSetOneAntiMsgTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DefaultTimeWarpEventSetOneAntiMsgTest.obj `if test -f 'warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp'; then $(CYGPATH_W) 'warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/DefaultTimeWarpEventSetOneAntiMsgTest.cpp'; fi`

EventMessageBaseTest.o: warped/EventMessageBaseTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EventMessageBaseTest.o -MD -MP -MF $(DEPDIR)/EventMessageBaseTest.Tpo -c -o EventMessageBaseTest.o `test -f 'warped/EventMessageBaseTest.cpp' || echo '$(srcdir)/'`warped/EventMessageBaseTest.cpp
	$(am__mv) $(DEPDIR)/EventMessageBaseTest.Tpo $(DEPDIR)/EventMessageBaseTest.Po
#	source='warped/EventMessageBaseTest.cpp' object='EventMessageBaseTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EventMessageBaseTest.o `test -f 'warped/EventMessageBaseTest.cpp' || echo '$(srcdir)/'`warped/EventMessageBaseTest.cpp

EventMessageBaseTest.obj: warped/EventMessageBaseTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EventMessageBaseTest.obj -MD -MP -MF $(DEPDIR)/EventMessageBaseTest.Tpo -c -o EventMessageBaseTest.obj `if test -f 'warped/EventMessageBaseTest.cpp'; then $(CYGPATH_W) 'warped/EventMessageBaseTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/EventMessageBaseTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/EventMessageBaseTest.Tpo $(DEPDIR)/EventMessageBaseTest.Po
#	source='warped/EventMessageBaseTest.cpp' object='EventMessageBaseTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EventMessageBaseTest.obj `if test -f 'warped/EventMessageBaseTest.cpp'; then $(CYGPATH_W) 'warped/EventMessageBaseTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/EventMessageBaseTest.cpp'; fi`

EventMessageTest.o: warped/EventMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EventMessageTest.o -MD -MP -MF $(DEPDIR)/EventMessageTest.Tpo -c -o EventMessageTest.o `test -f 'warped/EventMessageTest.cpp' || echo '$(srcdir)/'`warped/EventMessageTest.cpp
	$(am__mv) $(DEPDIR)/EventMessageTest.Tpo $(DEPDIR)/EventMessageTest.Po
#	source='warped/EventMessageTest.cpp' object='EventMessageTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EventMessageTest.o `test -f 'warped/EventMessageTest.cpp' || echo '$(srcdir)/'`warped/EventMessageTest.cpp

EventMessageTest.obj: warped/EventMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EventMessageTest.obj -MD -MP -MF $(DEPDIR)/EventMessageTest.Tpo -c -o EventMessageTest.obj `if test -f 'warped/EventMessageTest.cpp'; then $(CYGPATH_W) 'warped/EventMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/EventMessageTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/EventMessageTest.Tpo $(DEPDIR)/EventMessageTest.Po
#	source='warped/EventMessageTest.cpp' object='EventMessageTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EventMessageTest.obj `if test -f 'warped/EventMessageTest.cpp'; then $(CYGPATH_W) 'warped/EventMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/EventMessageTest.cpp'; fi`

EventTest.o: warped/EventTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EventTest.o -MD -MP -MF $(DEPDIR)/EventTest.Tpo -c -o EventTest.o `test -f 'warped/EventTest.cpp' || echo '$(srcdir)/'`warped/EventTest.cpp
	$(am__mv) $(DEPDIR)/EventTest.Tpo $(DEPDIR)/EventTest.Po
#	source='warped/EventTest.cpp' object='EventTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EventTest.o `test -f 'warped/EventTest.cpp' || echo '$(srcdir)/'`warped/EventTest.cpp

EventTest.obj: warped/EventTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EventTest.obj -MD -MP -MF $(DEPDIR)/EventTest.Tpo -c -o EventTest.obj `if test -f 'warped/EventTest.cpp'; then $(CYGPATH_W) 'warped/EventTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/EventTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/EventTest.Tpo $(DEPDIR)/EventTest.Po
#	source='warped/EventTest.cpp' object='EventTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EventTest.obj `if test -f 'warped/EventTest.cpp'; then $(CYGPATH_W) 'warped/EventTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/EventTest.cpp'; fi`

GVTUpdateMessageTest.o: warped/GVTUpdateMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GVTUpdateMessageTest.o -MD -MP -MF $(DEPDIR)/GVTUpdateMessageTest.Tpo -c -o GVTUpdateMessageTest.o `test -f 'warped/GVTUpdateMessageTest.cpp' || echo '$(srcdir)/'`warped/GVTUpdateMessageTest.cpp
	$(am__mv) $(DEPDIR)/GVTUpdateMessageTest.Tpo $(DEPDIR)/GVTUpdateMessageTest.Po
#	source='warped/GVTUpdateMessageTest.cpp' object='GVTUpdateMessageTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GVTUpdateMessageTest.o `test -f 'warped/GVTUpdateMessageTest.cpp' || echo '$(srcdir)/'`warped/GVTUpdateMessageTest.cpp

GVTUpdateMessageTest.obj: warped/GVTUpdateMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GVTUpdateMessageTest.obj -MD -MP -MF $(DEPDIR)/GVTUpdateMessageTest.Tpo -c -o GVTUpdateMessageTest.obj `if test -f 'warped/GVTUpdateMessageTest.cpp'; then $(CYGPATH_W) 'warped/GVTUpdateMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/GVTUpdateMessageTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/GVTUpdateMessageTest.Tpo $(DEPDIR)/GVTUpdateMessageTest.Po
#	source='warped/GVTUpdateMessageTest.cpp' object='GVTUpdateMessageTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GVTUpdateMessageTest.obj `if test -f 'warped/GVTUpdateMessageTest.cpp'; then $(CYGPATH_W) 'warped/GVTUpdateMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/GVTUpdateMessageTest.cpp'; fi`

InitializationMessageTest.o: warped/InitializationMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InitializationMessageTest.o -MD -MP -MF $(DEPDIR)/InitializationMessageTest.Tpo -c -o InitializationMessageTest.o `test -f 'warped/InitializationMessageTest.cpp' || echo '$(srcdir)/'`warped/InitializationMessageTest.cpp
	$(am__mv) $(DEPDIR)/InitializationMessageTest.Tpo $(DEPDIR)/InitializationMessageTest.Po
#	source='warped/InitializationMessageTest.cpp' object='InitializationMessageTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InitializationMessageTest.o `test -f 'warped/InitializationMessageTest.cpp' || echo '$(srcdir)/'`warped/InitializationMessageTest.cpp

InitializationMessageTest.obj: warped/InitializationMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InitializationMessageTest.obj -MD -MP -MF $(DEPDIR)/InitializationMessageTest.Tpo -c -o InitializationMessageTest.obj `if test -f 'warped/InitializationMessageTest.cpp'; then $(CYGPATH_W) 'warped/InitializationMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/InitializationMessageTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/InitializationMessageTest.Tpo $(DEPDIR)/InitializationMessageTest.Po
#	source='warped/InitializationMessageTest.cpp' object='InitializationMessageTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InitializationMessageTest.obj `if test -f 'warped/InitializationMessageTest.cpp'; then $(CYGPATH_W) 'warped/InitializationMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/InitializationMessageTest.cpp'; fi`

KernelMessageTest.o: warped/KernelMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KernelMessageTest.o -MD -MP -MF $(DEPDIR)/KernelMessageTest.Tpo -c -o KernelMessageTest.o `test -f 'warped/KernelMessageTest.cpp' || echo '$(srcdir)/'`warped/KernelMessageTest.cpp
	$(am__mv) $(DEPDIR)/KernelMessageTest.Tpo $(DEPDIR)/KernelMessageTest.Po
#	source='warped/KernelMessageTest.cpp' object='KernelMessageTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KernelMessageTest.o `test -f 'warped/KernelMessageTest.cpp' || echo '$(srcdir)/'`warped/KernelMessageTest.cpp

KernelMessageTest.obj: warped/KernelMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KernelMessageTest.obj -MD -MP -MF $(DEPDIR)/KernelMessageTest.Tpo -c -o KernelMessageTest.obj `if test -f 'warped/KernelMessageTest.cpp'; then $(CYGPATH_W) 'warped/KernelMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/KernelMessageTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/KernelMessageTest.Tpo $(DEPDIR)/KernelMessageTest.Po
#	source='warped/KernelMessageTest.cpp' object='KernelMessageTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KernelMessageTest.obj `if test -f 'warped/KernelMessageTest.cpp'; then $(CYGPATH_W) 'warped/KernelMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/KernelMessageTest.cpp'; fi`

LazyOutputManagerTest.o: warped/LazyOutputManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LazyOutputManagerTest.o -MD -MP -MF $(DEPDIR)/LazyOutputManagerTest.Tpo -c -o LazyOutputManagerTest.o `test -f 'warped/LazyOutputManagerTest.cpp' || echo '$(srcdir)/'`warped/LazyOutputManagerTest.cpp
	$(am__mv) $(DEPDIR)/LazyOutputManagerTest.Tpo $(DEPDIR)/LazyOutputManagerTest.Po
#	source='warped/LazyOutputManagerTest.cpp' object='LazyOutputManagerTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LazyOutputManagerTest.o `test -f 'warped/LazyOutputManagerTest.cpp' || echo '$(srcdir)/'`warped/LazyOutputManagerTest.cpp

LazyOutputManagerTest.obj: warped/LazyOutputManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LazyOutputManagerTest.obj -MD -MP -MF $(DEPDIR)/LazyOutputManagerTest.Tpo -c -o LazyOutputManagerTest.obj `if test -f 'warped/LazyOutputManagerTest.cpp'; then $(CYGPATH_W) 'warped/LazyOutputManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/LazyOutputManagerTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/LazyOutputManagerTest.Tpo $(DEPDIR)/LazyOutputManagerTest.Po
#	source='warped/LazyOutputManagerTest.cpp' object='LazyOutputManagerTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LazyOutputManagerTest.obj `if test -f 'warped/LazyOutputManagerTest.cpp'; then $(CYGPATH_W) 'warped/LazyOutputManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/LazyOutputManagerTest.cpp'; fi`

MatternGVTMessageTest.o: warped/MatternGVTMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MatternGVTMessageTest.o -MD -MP -MF $(DEPDIR)/MatternGVTMessageTest.Tpo -c -o MatternGVTMessageTest.o `test -f 'warped/MatternGVTMessageTest.cpp' || echo '$(srcdir)/'`warped/MatternGVTMessageTest.cpp
	$(am__mv) $(DEPDIR)/MatternGVTMessageTest.Tpo $(DEPDIR)/MatternGVTMessageTest.Po
#	source='warped/MatternGVTMessageTest.cpp' object='MatternGVTMessageTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MatternGVTMessageTest.o `test -f 'warped/MatternGVTMessageTest.cpp' || echo '$(srcdir)/'`warped/MatternGVTMessageTest.cpp

MatternGVTMessageTest.obj: warped/MatternGVTMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MatternGVTMessageTest.obj -MD -MP -MF $(DEPDIR)/MatternGVTMessageTest.Tpo -c -o MatternGVTMessageTest.obj `if test -f 'warped/MatternGVTMessageTest.cpp'; then $(CYGPATH_W) 'warped/MatternGVTMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/MatternGVTMessageTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/MatternGVTMessageTest.Tpo $(DEPDIR)/MatternGVTMessageTest.Po
#	source='warped/MatternGVTMessageTest.cpp' object='MatternGVTMessageTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MatternGVTMessageTest.obj `if test -f 'warped/MatternGVTMessageTest.cpp'; then $(CYGPATH_W) 'warped/MatternGVTMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/MatternGVTMessageTest.cpp'; fi`

NegativeEventMessageTest.o: warped/NegativeEventMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NegativeEventMessageTest.o -MD -MP -MF $(DEPDIR)/NegativeEventMessageTest.Tpo -c -o NegativeEventMessageTest.o `test -f 'warped/NegativeEventMessageTest.cpp' || echo '$(srcdir)/'`warped/NegativeEventMessageTest.cpp
	$(am__mv) $(DEPDIR)/NegativeEventMessageTest.Tpo $(DEPDIR)/NegativeEventMessageTest.Po
#	source='warped/NegativeEventMessageTest.cpp' object='NegativeEventMessageTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NegativeEventMessageTest.o `test -f 'warped/NegativeEventMessageTest.cpp' || echo '$(srcdir)/'`warped/NegativeEventMessageTest.cpp

NegativeEventMessageTest.obj: warped/NegativeEventMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NegativeEventMessageTest.obj -MD -MP -MF $(DEPDIR)/NegativeEventMessageTest.Tpo -c -o NegativeEventMessageTest.obj `if test -f 'warped/NegativeEventMessageTest.cpp'; then $(CYGPATH_W) 'warped/NegativeEventMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/NegativeEventMessageTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/NegativeEventMessageTest.Tpo $(DEPDIR)/NegativeEventMessageTest.Po
#	source='warped/NegativeEventMessageTest.cpp' object='NegativeEventMessageTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NegativeEventMessageTest.obj `if test -f 'warped/NegativeEventMessageTest.cpp'; then $(CYGPATH_W) 'warped/NegativeEventMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/NegativeEventMessageTest.cpp'; fi`

OutputManagerTest.o: warped/OutputManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OutputManagerTest.o -MD -MP -MF $(DEPDIR)/OutputManagerTest.Tpo -c -o OutputManagerTest.o `test -f 'warped/OutputManagerTest.cpp' || echo '$(srcdir)/'`warped/OutputManagerTest.cpp
	$(am__mv) $(DEPDIR)/OutputManagerTest.Tpo $(DEPDIR)/OutputManagerTest.Po
#	source='warped/OutputManagerTest.cpp' object='OutputManagerTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OutputManagerTest.o `test -f 'warped/OutputManagerTest.cpp' || echo '$(srcdir)/'`warped/OutputManagerTest.cpp

OutputManagerTest.obj: warped/OutputManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OutputManagerTest.obj -MD -MP -MF $(DEPDIR)/OutputManagerTest.Tpo -c -o OutputManagerTest.obj `if test -f 'warped/OutputManagerTest.cpp'; then $(CYGPATH_W) 'warped/OutputManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/OutputManagerTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/OutputManagerTest.Tpo $(DEPDIR)/OutputManagerTest.Po
#	source='warped/OutputManagerTest.cpp' object='OutputManagerTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OutputManagerTest.obj `if test -f 'warped/OutputManagerTest.cpp'; then $(CYGPATH_W) 'warped/OutputManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/OutputManagerTest.cpp'; fi`

RestoreCkptMessageTest.o: warped/RestoreCkptMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RestoreCkptMessageTest.o -MD -MP -MF $(DEPDIR)/RestoreCkptMessageTest.Tpo -c -o RestoreCkptMessageTest.o `test -f 'warped/RestoreCkptMessageTest.cpp' || echo '$(srcdir)/'`warped/RestoreCkptMessageTest.cpp
	$(am__mv) $(DEPDIR)/RestoreCkptMessageTest.Tpo $(DEPDIR)/RestoreCkptMessageTest.Po
#	source='warped/RestoreCkptMessageTest.cpp' object='RestoreCkptMessageTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RestoreCkptMessageTest.o `test -f 'warped/RestoreCkptMessageTest.cpp' || echo '$(srcdir)/'`warped/RestoreCkptMessageTest.cpp

RestoreCkptMessageTest.obj: warped/RestoreCkptMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RestoreCkptMessageTest.obj -MD -MP -MF $(DEPDIR)/RestoreCkptMessageTest.Tpo -c -o RestoreCkptMessageTest.obj `if test -f 'warped/RestoreCkptMessageTest.cpp'; then $(CYGPATH_W) 'warped/RestoreCkptMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/RestoreCkptMessageTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/RestoreCkptMessageTest.Tpo $(DEPDIR)/RestoreCkptMessageTest.Po
#	source='warped/RestoreCkptMessageTest.cpp' object='RestoreCkptMessageTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RestoreCkptMessageTest.obj `if test -f 'warped/RestoreCkptMessageTest.cpp'; then $(CYGPATH_W) 'warped/RestoreCkptMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/RestoreCkptMessageTest.cpp'; fi`

SchedulingManagerTest.o: warped/SchedulingManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SchedulingManagerTest.o -MD -MP -MF $(DEPDIR)/SchedulingManagerTest.Tpo -c -o SchedulingManagerTest.o `test -f 'warped/SchedulingManagerTest.cpp' || echo '$(srcdir)/'`warped/SchedulingManagerTest.cpp
	$(am__mv) $(DEPDIR)/SchedulingManagerTest.Tpo $(DEPDIR)/SchedulingManagerTest.Po
#	source='warped/SchedulingManagerTest.cpp' object='SchedulingManagerTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SchedulingManagerTest.o `test -f 'warped/SchedulingManagerTest.cpp' || echo '$(srcdir)/'`warped/SchedulingManagerTest.cpp

SchedulingManagerTest.obj: warped/SchedulingManagerTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SchedulingManagerTest.obj -MD -MP -MF $(DEPDIR)/SchedulingManagerTest.Tpo -c -o SchedulingManagerTest.obj `if test -f 'warped/SchedulingManagerTest.cpp'; then $(CYGPATH_W) 'warped/SchedulingManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/SchedulingManagerTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/SchedulingManagerTest.Tpo $(DEPDIR)/SchedulingManagerTest.Po
#	source='warped/SchedulingManagerTest.cpp' object='SchedulingManagerTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SchedulingManagerTest.obj `if test -f 'warped/SchedulingManagerTest.cpp'; then $(CYGPATH_W) 'warped/SchedulingManagerTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/SchedulingManagerTest.cpp'; fi`

SerializableTest.o: warped/SerializableTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SerializableTest.o -MD -MP -MF $(DEPDIR)/SerializableTest.Tpo -c -o SerializableTest.o `test -f 'warped/SerializableTest.cpp' || echo '$(srcdir)/'`warped/SerializableTest.cpp
	$(am__mv) $(DEPDIR)/SerializableTest.Tpo $(DEPDIR)/SerializableTest.Po
#	source='warped/SerializableTest.cpp' object='SerializableTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SerializableTest.o `test -f 'warped/SerializableTest.cpp' || echo '$(srcdir)/'`warped/SerializableTest.cpp

SerializableTest.obj: warped/SerializableTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SerializableTest.obj -MD -MP -MF $(DEPDIR)/SerializableTest.Tpo -c -o SerializableTest.obj `if test -f 'warped/SerializableTest.cpp'; then $(CYGPATH_W) 'warped/SerializableTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/SerializableTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/SerializableTest.Tpo $(DEPDIR)/SerializableTest.Po
#	source='warped/SerializableTest.cpp' object='SerializableTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SerializableTest.obj `if test -f 'warped/SerializableTest.cpp'; then $(CYGPATH_W) 'warped/SerializableTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/SerializableTest.cpp'; fi`

SerializedInstanceTest.o: warped/SerializedInstanceTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SerializedInstanceTest.o -MD -MP -MF $(DEPDIR)/SerializedInstanceTest.Tpo -c -o SerializedInstanceTest.o `test -f 'warped/SerializedInstanceTest.cpp' || echo '$(srcdir)/'`warped/SerializedInstanceTest.cpp
	$(am__mv) $(DEPDIR)/SerializedInstanceTest.Tpo $(DEPDIR)/SerializedInstanceTest.Po
#	source='warped/SerializedInstanceTest.cpp' object='SerializedInstanceTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SerializedInstanceTest.o `test -f 'warped/SerializedInstanceTest.cpp' || echo '$(srcdir)/'`warped/SerializedInstanceTest.cpp

SerializedInstanceTest.obj: warped/SerializedInstanceTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SerializedInstanceTest.obj -MD -MP -MF $(DEPDIR)/SerializedInstanceTest.Tpo -c -o SerializedInstanceTest.obj `if test -f 'warped/SerializedInstanceTest.cpp'; then $(CYGPATH_W) 'warped/SerializedInstanceTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/SerializedInstanceTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/SerializedInstanceTest.Tpo $(DEPDIR)/SerializedInstanceTest.Po
#	source='warped/SerializedInstanceTest.cpp' object='SerializedInstanceTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SerializedInstanceTest.obj `if test -f 'warped/SerializedInstanceTest.cpp'; then $(CYGPATH_W) 'warped/SerializedInstanceTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/SerializedInstanceTest.cpp'; fi`

StartMessageTest.o: warped/StartMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StartMessageTest.o -MD -MP -MF $(DEPDIR)/StartMessageTest.Tpo -c -o StartMessageTest.o `test -f 'warped/StartMessageTest.cpp' || echo '$(srcdir)/'`warped/StartMessageTest.cpp
	$(am__mv) $(DEPDIR)/StartMessageTest.Tpo $(DEPDIR)/StartMessageTest.Po
#	source='warped/StartMessageTest.cpp' object='StartMessageTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StartMessageTest.o `test -f 'warped/StartMessageTest.cpp' || echo '$(srcdir)/'`warped/StartMessageTest.cpp

StartMessageTest.obj: warped/StartMessageTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StartMessageTest.obj -MD -MP -MF $(DEPDIR)/StartMessageTest.Tpo -c -o StartMessageTest.obj `if test -f 'warped/StartMessageTest.cpp'; then $(CYGPATH_W) 'warped/StartMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/StartMessageTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/StartMessageTest.Tpo $(DEPDIR)/StartMessageTest.Po
#	source='warped/StartMessageTest.cpp' object='StartMessageTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StartMessageTest.obj `if test -f 'warped/StartMessageTest.cpp'; then $(CYGPATH_W) 'warped/StartMessageTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/StartMessageTest.cpp'; fi`

TerminateTokenTest.o: warped/TerminateTokenTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TerminateTokenTest.o -MD -MP -MF $(DEPDIR)/TerminateTokenTest.Tpo -c -o TerminateTokenTest.o `test -f 'warped/TerminateTokenTest.cpp' || echo '$(srcdir)/'`warped/TerminateTokenTest.cpp
	$(am__mv) $(DEPDIR)/TerminateTokenTest.Tpo $(DEPDIR)/TerminateTokenTest.Po
#	source='warped/TerminateTokenTest.cpp' object='TerminateTokenTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TerminateTokenTest.o `test -f 'warped/TerminateTokenTest.cpp' || echo '$(srcdir)/'`warped/TerminateTokenTest.cpp

TerminateTokenTest.obj: warped/TerminateTokenTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TerminateTokenTest.obj -MD -MP -MF $(DEPDIR)/TerminateTokenTest.Tpo -c -o TerminateTokenTest.obj `if test -f 'warped/TerminateTokenTest.cpp'; then $(CYGPATH_W) 'warped/TerminateTokenTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/TerminateTokenTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/TerminateTokenTest.Tpo $(DEPDIR)/TerminateTokenTest.Po
#	source='warped/TerminateTokenTest.cpp' object='TerminateTokenTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TerminateTokenTest.obj `if test -f 'warped/TerminateTokenTest.cpp'; then $(CYGPATH_W) 'warped/TerminateTokenTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/TerminateTokenTest.cpp'; fi`

TimeWarpEventSetTest.o: warped/TimeWarpEventSetTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimeWarpEventSetTest.o -MD -MP -MF $(DEPDIR)/TimeWarpEventSetTest.Tpo -c -o TimeWarpEventSetTest.o `test -f 'warped/TimeWarpEventSetTest.cpp' || echo '$(srcdir)/'`warped/TimeWarpEventSetTest.cpp
	$(am__mv) $(DEPDIR)/TimeWarpEventSetTest.Tpo $(DEPDIR)/TimeWarpEventSetTest.Po
#	source='warped/TimeWarpEventSetTest.cpp' object='TimeWarpEventSetTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimeWarpEventSetTest.o `test -f 'warped/TimeWarpEventSetTest.cpp' || echo '$(srcdir)/'`warped/TimeWarpEventSetTest.cpp

TimeWarpEventSetTest.obj: warped/TimeWarpEventSetTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimeWarpEventSetTest.obj -MD -MP -MF $(DEPDIR)/TimeWarpEventSetTest.Tpo -c -o TimeWarpEventSetTest.obj `if test -f 'warped/TimeWarpEventSetTest.cpp'; then $(CYGPATH_W) 'warped/TimeWarpEventSetTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/TimeWarpEventSetTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/TimeWarpEventSetTest.Tpo $(DEPDIR)/TimeWarpEventSetTest.Po
#	source='warped/TimeWarpEventSetTest.cpp' object='TimeWarpEventSetTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimeWarpEventSetTest.obj `if test -f 'warped/TimeWarpEventSetTest.cpp'; then $(CYGPATH_W) 'warped/TimeWarpEventSetTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/TimeWarpEventSetTest.cpp'; fi`

TimeWarpMultiSetTest.o: warped/TimeWarpMultiSetTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimeWarpMultiSetTest.o -MD -MP -MF $(DEPDIR)/TimeWarpMultiSetTest.Tpo -c -o TimeWarpMultiSetTest.o `test -f 'warped/TimeWarpMultiSetTest.cpp' || echo '$(srcdir)/'`warped/TimeWarpMultiSetTest.cpp
	$(am__mv) $(DEPDIR)/TimeWarpMultiSetTest.Tpo $(DEPDIR)/TimeWarpMultiSetTest.Po
#	source='warped/TimeWarpMultiSetTest.cpp' object='TimeWarpMultiSetTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimeWarpMultiSetTest.o `test -f 'warped/TimeWarpMultiSetTest.cpp' || echo '$(srcdir)/'`warped/TimeWarpMultiSetTest.cpp

TimeWarpMultiSetTest.obj: warped/TimeWarpMultiSetTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimeWarpMultiSetTest.obj -MD -MP -MF $(DEPDIR)/TimeWarpMultiSetTest.Tpo -c -o TimeWarpMultiSetTest.obj `if test -f 'warped/TimeWarpMultiSetTest.cpp'; then $(CYGPATH_W) 'warped/TimeWarpMultiSetTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/TimeWarpMultiSetTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/TimeWarpMultiSetTest.Tpo $(DEPDIR)/TimeWarpMultiSetTest.Po
#	source='warped/TimeWarpMultiSetTest.cpp' object='TimeWarpMultiSetTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimeWarpMultiSetTest.obj `if test -f 'warped/TimeWarpMultiSetTest.cpp'; then $(CYGPATH_W) 'warped/TimeWarpMultiSetTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/TimeWarpMultiSetTest.cpp'; fi`

TimeWarpMultiSetOneAntiMsgTest.o: warped/TimeWarpMultiSetOneAntiMsgTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimeWarpMultiSetOneAntiMsgTest.o -MD -MP -MF $(DEPDIR)/TimeWarpMultiSetOneAntiMsgTest.Tpo -c -o TimeWarpMultiSetOneAntiMsgTest.o `test -f 'warped/TimeWarpMultiSetOneAntiMsgTest.cpp' || echo '$(srcdir)/'`warped/TimeWarpMultiSetOneAntiMsgTest.cpp
	$(am__mv) $(DEPDIR)/TimeWarpMultiSetOneAntiMsgTest.Tpo $(DEPDIR)/TimeWarpMultiSetOneAntiMsgTest.Po
#	source='warped/TimeWarpMultiSetOneAntiMsgTest.cpp' object='TimeWarpMultiSetOneAntiMsgTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimeWarpMultiSetOneAntiMsgTest.o `test -f 'warped/TimeWarpMultiSetOneAntiMsgTest.cpp' || echo '$(srcdir)/'`warped/TimeWarpMultiSetOneAntiMsgTest.cpp

TimeWarpMultiSetOneAntiMsgTest.obj: warped/TimeWarpMultiSetOneAntiMsgTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimeWarpMultiSetOneAntiMsgTest.obj -MD -MP -MF $(DEPDIR)/TimeWarpMultiSetOneAntiMsgTest.Tpo -c -o TimeWarpMultiSetOneAntiMsgTest.obj `if test -f 'warped/TimeWarpMultiSetOneAntiMsgTest.cpp'; then $(CYGPATH_W) 'warped/TimeWarpMultiSetOneAntiMsgTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/TimeWarpMultiSetOneAntiMsgTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/TimeWarpMultiSetOneAntiMsgTest.Tpo $(DEPDIR)/TimeWarpMultiSetOneAntiMsgTest.Po
#	source='warped/TimeWarpMultiSetOneAntiMsgTest.cpp' object='TimeWarpMultiSetOneAntiMsgTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimeWarpMultiSetOneAntiMsgTest.obj `if test -f 'warped/TimeWarpMultiSetOneAntiMsgTest.cpp'; then $(CYGPATH_W) 'warped/TimeWarpMultiSetOneAntiMsgTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/TimeWarpMultiSetOneAntiMsgTest.cpp'; fi`

TimeWarpSimulationManagerAdapter.o: warped/TimeWarpSimulationManagerAdapter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimeWarpSimulationManagerAdapter.o -MD -MP -MF $(DEPDIR)/TimeWarpSimulationManagerAdapter.Tpo -c -o TimeWarpSimulationManagerAdapter.o `test -f 'warped/TimeWarpSimulationManagerAdapter.cpp' || echo '$(srcdir)/'`warped/TimeWarpSimulationManagerAdapter.cpp
	$(am__mv) $(DEPDIR)/TimeWarpSimulationManagerAdapter.Tpo $(DEPDIR)/TimeWarpSimulationManagerAdapter.Po
#	source='warped/TimeWarpSimulationManagerAdapter.cpp' object='TimeWarpSimulationManagerAdapter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimeWarpSimulationManagerAdapter.o `test -f 'warped/TimeWarpSimulationManagerAdapter.cpp' || echo '$(srcdir)/'`warped/TimeWarpSimulationManagerAdapter.cpp

TimeWarpSimulationManagerAdapter.obj: warped/TimeWarpSimulationManagerAdapter.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TimeWarpSimulationManagerAdapter.obj -MD -MP -MF $(DEPDIR)/TimeWarpSimulationManagerAdapter.Tpo -c -o TimeWarpSimulationManagerAdapter.obj `if test -f 'warped/TimeWarpSimulationManagerAdapter.cpp'; then $(CYGPATH_W) 'warped/TimeWarpSimulationManagerAdapter.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/TimeWarpSimulationManagerAdapter.cpp'; fi`
	$(am__mv) $(DEPDIR)/TimeWarpSimulationManagerAdapter.Tpo $(DEPDIR)/TimeWarpSimulationManagerAdapter.Po
#	source='warped/TimeWarpSimulationManagerAdapter.cpp' object='TimeWarpSimulationManagerAdapter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TimeWarpSimulationManagerAdapter.obj `if test -f 'warped/TimeWarpSimulationManagerAdapter.cpp'; then $(CYGPATH_W) 'warped/TimeWarpSimulationManagerAdapter.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/TimeWarpSimulationManagerAdapter.cpp'; fi`

WarpedUnitTest.o: warped/WarpedUnitTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WarpedUnitTest.o -MD -MP -MF $(DEPDIR)/WarpedUnitTest.Tpo -c -o WarpedUnitTest.o `test -f 'warped/WarpedUnitTest.cpp' || echo '$(srcdir)/'`warped/WarpedUnitTest.cpp
	$(am__mv) $(DEPDIR)/WarpedUnitTest.Tpo $(DEPDIR)/WarpedUnitTest.Po
#	source='warped/WarpedUnitTest.cpp' object='WarpedUnitTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WarpedUnitTest.o `test -f 'warped/WarpedUnitTest.cpp' || echo '$(srcdir)/'`warped/WarpedUnitTest.cpp

WarpedUnitTest.obj: warped/WarpedUnitTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WarpedUnitTest.obj -MD -MP -MF $(DEPDIR)/WarpedUnitTest.Tpo -c -o WarpedUnitTest.obj `if test -f 'warped/WarpedUnitTest.cpp'; then $(CYGPATH_W) 'warped/WarpedUnitTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/WarpedUnitTest.cpp'; fi`
	$(am__mv) $(DEPDIR)/WarpedUnitTest.Tpo $(DEPDIR)/WarpedUnitTest.Po
#	source='warped/WarpedUnitTest.cpp' object='WarpedUnitTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WarpedUnitTest.obj `if test -f 'warped/WarpedUnitTest.cpp'; then $(CYGPATH_W) 'warped/WarpedUnitTest.cpp'; else $(CYGPATH_W) '$(srcdir)/warped/WarpedUnitTest.cpp'; fi`

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libLTLIBRARIES clean-libtool \
	clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libLTLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libLTLIBRARIES

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLTLIBRARIES clean-libtool clean-noinstPROGRAMS ctags \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-libLTLIBRARIES install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-libLTLIBRARIES


# EXTRA_DIST=warpedUnitTests/Makefile.am.stub

#EXTRA_DIST=adapttest/Makefile.am.stub

# $(LOGICGATES_PROGRAM)

# $(GATESCIRCUIT_PROGRAM)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
